{"ast":null,"code":"/**\n * @remix-run/router v1.3.2\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n} ////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\n\n\nvar Action;\n\n(function (Action) {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Action[\"Pop\"] = \"POP\";\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n\n  Action[\"Push\"] = \"PUSH\";\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n\n  Action[\"Replace\"] = \"REPLACE\";\n})(Action || (Action = {}));\n\nconst PopStateEventType = \"popstate\";\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\n\nfunction createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  let {\n    initialEntries = [\"/\"],\n    initialIndex,\n    v5Compat = false\n  } = options;\n  let entries; // Declare so we can access from createMemoryLocation\n\n  entries = initialEntries.map((entry, index) => createMemoryLocation(entry, typeof entry === \"string\" ? null : entry.state, index === 0 ? \"default\" : undefined));\n  let index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);\n  let action = Action.Pop;\n  let listener = null;\n\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n\n  function getCurrentLocation() {\n    return entries[index];\n  }\n\n  function createMemoryLocation(to, state, key) {\n    if (state === void 0) {\n      state = null;\n    }\n\n    let location = createLocation(entries ? getCurrentLocation().pathname : \"/\", to, state, key);\n    warning$1(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in memory history: \" + JSON.stringify(to));\n    return location;\n  }\n\n  function createHref(to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  let history = {\n    get index() {\n      return index;\n    },\n\n    get action() {\n      return action;\n    },\n\n    get location() {\n      return getCurrentLocation();\n    },\n\n    createHref,\n\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n\n    encodeLocation(to) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\"\n      };\n    },\n\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 1\n        });\n      }\n    },\n\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 0\n        });\n      }\n    },\n\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n\n      if (listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta\n        });\n      }\n    },\n\n    listen(fn) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    }\n\n  };\n  return history;\n}\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\n\n\nfunction createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  function createBrowserLocation(window, globalHistory) {\n    let {\n      pathname,\n      search,\n      hash\n    } = window.location;\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    }, // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n\n  function createBrowserHref(window, to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);\n}\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\n\n\nfunction createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  function createHashLocation(window, globalHistory) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\"\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    }, // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n\n  function createHashHref(window, to) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location, to) {\n    warning$1(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in hash history.push(\" + JSON.stringify(to) + \")\");\n  }\n\n  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);\n}\n\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nfunction warning$1(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n/**\n * For browser-based histories, we combine the state and key into an object\n */\n\n\nfunction getHistoryState(location, index) {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index\n  };\n}\n/**\n * Creates a Location object with a unique key from the given Path\n */\n\n\nfunction createLocation(current, to, state, key) {\n  if (state === void 0) {\n    state = null;\n  }\n\n  let location = _extends({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\"\n  }, typeof to === \"string\" ? parsePath(to) : to, {\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: to && to.key || key || createKey()\n  });\n\n  return location;\n}\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\n\n\nfunction createPath(_ref) {\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\"\n  } = _ref;\n  if (search && search !== \"?\") pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\") pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\n\n\nfunction parsePath(path) {\n  let parsedPath = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nfunction getUrlBasedHistory(getLocation, createHref, validateLocation, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  let {\n    window = document.defaultView,\n    v5Compat = false\n  } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener = null;\n  let index = getIndex(); // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState(_extends({}, globalHistory.state, {\n      idx: index\n    }), \"\");\n  }\n\n  function getIndex() {\n    let state = globalHistory.state || {\n      idx: null\n    };\n    return state.idx;\n  }\n\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n\n    if (listener) {\n      listener({\n        action,\n        location: history.location,\n        delta\n      });\n    }\n  }\n\n  function push(to, state) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location); // try...catch because iOS limits us to 100 pushState calls :/\n\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 1\n      });\n    }\n  }\n\n  function replace(to, state) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 0\n      });\n    }\n  }\n\n  function createURL(to) {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base = window.location.origin !== \"null\" ? window.location.origin : window.location.href;\n    let href = typeof to === \"string\" ? to : createPath(to);\n    invariant(base, \"No window.location.(origin|href) available to create URL for href: \" + href);\n    return new URL(href, base);\n  }\n\n  let history = {\n    get action() {\n      return action;\n    },\n\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n\n    listen(fn) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n\n    createHref(to) {\n      return createHref(window, to);\n    },\n\n    createURL,\n\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash\n      };\n    },\n\n    push,\n    replace,\n\n    go(n) {\n      return globalHistory.go(n);\n    }\n\n  };\n  return history;\n} //#endregion\n\n\nvar ResultType;\n\n(function (ResultType) {\n  ResultType[\"data\"] = \"data\";\n  ResultType[\"deferred\"] = \"deferred\";\n  ResultType[\"redirect\"] = \"redirect\";\n  ResultType[\"error\"] = \"error\";\n})(ResultType || (ResultType = {}));\n\nfunction isIndexRoute(route) {\n  return route.index === true;\n} // Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\n\n\nfunction convertRoutesToDataRoutes(routes, parentPath, allIds) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n\n  if (allIds === void 0) {\n    allIds = new Set();\n  }\n\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(route.index !== true || !route.children, \"Cannot specify children on an index route\");\n    invariant(!allIds.has(id), \"Found a route id collision on id \\\"\" + id + \"\\\".  Route \" + \"id's must be globally unique within Data Router usages\");\n    allIds.add(id);\n\n    if (isIndexRoute(route)) {\n      let indexRoute = _extends({}, route, {\n        id\n      });\n\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute = _extends({}, route, {\n        id,\n        children: route.children ? convertRoutesToDataRoutes(route.children, treePath, allIds) : undefined\n      });\n\n      return pathOrLayoutRoute;\n    }\n  });\n}\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\n\n\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n\n  let location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  let matches = null;\n\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch(branches[i], // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    safelyDecodeURI(pathname));\n  }\n\n  return matches;\n}\n\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n\n  let flattenRoute = (route, index, relativePath) => {\n    let meta = {\n      relativePath: relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(meta.relativePath.startsWith(parentPath), \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\");\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta); // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n\n    if (route.children && route.children.length > 0) {\n      invariant( // Our types know better, but runtime JS may not!\n      // @ts-expect-error\n      route.index !== true, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\"));\n      flattenRoutes(route.children, branches, routesMeta, path);\n    } // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n\n\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta\n    });\n  };\n\n  routes.forEach((route, index) => {\n    var _route$path; // coarse-grain check for optional params\n\n\n    if (route.path === \"\" || !((_route$path = route.path) != null && _route$path.includes(\"?\"))) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n  return branches;\n}\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\n\n\nfunction explodeOptionalSegments(path) {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n  let [first, ...rest] = segments; // Optional path segments are denoted by a trailing `?`\n\n  let isOptional = first.endsWith(\"?\"); // Compute the corresponding required segment: `foo?` -> `foo`\n\n  let required = first.replace(/\\?$/, \"\");\n\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n  let result = []; // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explodes _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n\n  result.push(...restExploded.map(subpath => subpath === \"\" ? required : [required, subpath].join(\"/\"))); // Then if this is an optional value, add all child versions without\n\n  if (isOptional) {\n    result.push(...restExploded);\n  } // for absolute paths, ensure `/` instead of empty segment\n\n\n  return result.map(exploded => path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded);\n}\n\nfunction rankRouteBranches(branches) {\n  branches.sort((a, b) => a.score !== b.score ? b.score - a.score // Higher score first\n  : compareIndexes(a.routesMeta.map(meta => meta.childrenIndex), b.routesMeta.map(meta => meta.childrenIndex)));\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\n\nconst isSplat = s => s === \"*\";\n\nfunction computeScore(path, index) {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments.filter(s => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue), initialScore);\n}\n\nfunction compareIndexes(a, b) {\n  let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n  return siblings ? // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\n\nfunction matchRouteBranch(branch, pathname) {\n  let {\n    routesMeta\n  } = branch;\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches = [];\n\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end\n    }, remainingPathname);\n    if (!match) return null;\n    Object.assign(matchedParams, match.params);\n    let route = meta.route;\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),\n      route\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\n\n\nfunction generatePath(originalPath, params) {\n  if (params === void 0) {\n    params = {};\n  }\n\n  let path = originalPath;\n\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(false, \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n    path = path.replace(/\\*$/, \"/*\");\n  }\n\n  return path.replace(/^:(\\w+)(\\??)/g, (_, key, optional) => {\n    let param = params[key];\n\n    if (optional === \"?\") {\n      return param == null ? \"\" : param;\n    }\n\n    if (param == null) {\n      invariant(false, \"Missing \\\":\" + key + \"\\\" param\");\n    }\n\n    return param;\n  }).replace(/\\/:(\\w+)(\\??)/g, (_, key, optional) => {\n    let param = params[key];\n\n    if (optional === \"?\") {\n      return param == null ? \"\" : \"/\" + param;\n    }\n\n    if (param == null) {\n      invariant(false, \"Missing \\\":\" + key + \"\\\" param\");\n    }\n\n    return \"/\" + param;\n  }) // Remove any optional markers from optional static segments\n  .replace(/\\?/g, \"\").replace(/(\\/?)\\*/, (_, prefix, __, str) => {\n    const star = \"*\";\n\n    if (params[star] == null) {\n      // If no splat was provided, trim the trailing slash _unless_ it's\n      // the entire path\n      return str === \"/*\" ? \"/\" : \"\";\n    } // Apply the splat\n\n\n    return \"\" + prefix + params[star];\n  });\n}\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\n\n\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n\n  let [matcher, paramNames] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);\n  let match = pathname.match(matcher);\n  if (!match) return null;\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params = paramNames.reduce((memo, paramName, index) => {\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      let splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n\n    memo[paramName] = safelyDecodeURIComponent(captureGroups[index] || \"\", paramName);\n    return memo;\n  }, {});\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern\n  };\n}\n\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n\n  if (end === void 0) {\n    end = true;\n  }\n\n  warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n  let paramNames = [];\n  let regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/\\/:(\\w+)/g, (_, paramName) => {\n    paramNames.push(paramName);\n    return \"/([^\\\\/]+)\";\n  });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else ;\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURI(value) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(false, \"The URL path \\\"\" + value + \"\\\" could not be decoded because it is is a \" + \"malformed URL segment. This is probably due to a bad percent \" + (\"encoding (\" + error + \").\"));\n    return value;\n  }\n}\n\nfunction safelyDecodeURIComponent(value, paramName) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(false, \"The value for the URL param \\\"\" + paramName + \"\\\" will not be decoded because\" + (\" the string \\\"\" + value + \"\\\" is a malformed URL segment. This is probably\") + (\" due to a bad percent encoding (\" + error + \").\"));\n    return value;\n  }\n}\n/**\n * @private\n */\n\n\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  } // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n\n\n  let startIndex = basename.endsWith(\"/\") ? basename.length - 1 : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n/**\n * @private\n */\n\n\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging @remix-run/router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\n\n\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\"\n  } = typeof to === \"string\" ? parsePath(to) : to;\n  let pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\n\nfunction resolvePathname(relativePath, fromPathname) {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(segment => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(char, field, dest, path) {\n  return \"Cannot include a '\" + char + \"' character in a manually specified \" + (\"`to.\" + field + \"` field [\" + JSON.stringify(path) + \"].  Please separate it out to the \") + (\"`to.\" + dest + \"` field. Alternatively you may provide the full path as \") + \"a string in <Link to=\\\"...\\\"> and the router will parse it for you.\";\n}\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\n\n\nfunction getPathContributingMatches(matches) {\n  return matches.filter((match, index) => index === 0 || match.route.path && match.route.path.length > 0);\n}\n/**\n * @private\n */\n\n\nfunction resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {\n  if (isPathRelative === void 0) {\n    isPathRelative = false;\n  }\n\n  let to;\n\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = _extends({}, toArg);\n    invariant(!to.pathname || !to.pathname.includes(\"?\"), getInvalidPathError(\"?\", \"pathname\", \"search\", to));\n    invariant(!to.pathname || !to.pathname.includes(\"#\"), getInvalidPathError(\"#\", \"pathname\", \"hash\", to));\n    invariant(!to.search || !to.search.includes(\"#\"), getInvalidPathError(\"#\", \"search\", \"hash\", to));\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n  let from; // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\"); // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    } // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from); // Ensure the pathname has a trailing slash if the original \"to\" had one\n\n  let hasExplicitTrailingSlash = toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\"); // Or if this was a link to the current path which has a trailing slash\n\n  let hasCurrentTrailingSlash = (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n\n  if (!path.pathname.endsWith(\"/\") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n/**\n * @private\n */\n\n\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n/**\n * @private\n */\n\n\nconst joinPaths = paths => paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n/**\n * @private\n */\n\n\nconst normalizePathname = pathname => pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n/**\n * @private\n */\n\n\nconst normalizeSearch = search => !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n/**\n * @private\n */\n\n\nconst normalizeHash = hash => !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\n\n\nconst json = function json(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  let headers = new Headers(responseInit.headers);\n\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), _extends({}, responseInit, {\n    headers\n  }));\n};\n\nclass AbortedDeferredError extends Error {}\n\nclass DeferredData {\n  constructor(data, responseInit) {\n    this.pendingKeysSet = new Set();\n    this.subscribers = new Set();\n    this.deferredKeys = [];\n    invariant(data && typeof data === \"object\" && !Array.isArray(data), \"defer() only accepts plain objects\"); // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n\n    let reject;\n    this.abortPromise = new Promise((_, r) => reject = r);\n    this.controller = new AbortController();\n\n    let onAbort = () => reject(new AbortedDeferredError(\"Deferred data aborted\"));\n\n    this.unlistenAbortSignal = () => this.controller.signal.removeEventListener(\"abort\", onAbort);\n\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n    this.data = Object.entries(data).reduce((acc, _ref) => {\n      let [key, value] = _ref;\n      return Object.assign(acc, {\n        [key]: this.trackPromise(key, value)\n      });\n    }, {});\n\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n\n    this.init = responseInit;\n  }\n\n  trackPromise(key, value) {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key); // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n\n    let promise = Promise.race([value, this.abortPromise]).then(data => this.onSettle(promise, key, null, data), error => this.onSettle(promise, key, error)); // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n\n    promise.catch(() => {});\n    Object.defineProperty(promise, \"_tracked\", {\n      get: () => true\n    });\n    return promise;\n  }\n\n  onSettle(promise, key, error, data) {\n    if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeysSet.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    if (error) {\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", {\n      get: () => data\n    });\n    this.emit(false, key);\n    return data;\n  }\n\n  emit(aborted, settledKey) {\n    this.subscribers.forEach(subscriber => subscriber(aborted, settledKey));\n  }\n\n  subscribe(fn) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n\n  async resolveData(signal) {\n    let aborted = false;\n\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise(resolve => {\n        this.subscribe(aborted => {\n          signal.removeEventListener(\"abort\", onAbort);\n\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(this.data !== null && this.done, \"Can only unwrap data on initialized and settled deferreds\");\n    return Object.entries(this.data).reduce((acc, _ref2) => {\n      let [key, value] = _ref2;\n      return Object.assign(acc, {\n        [key]: unwrapTrackedPromise(value)\n      });\n    }, {});\n  }\n\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n\n}\n\nfunction isTrackedPromise(value) {\n  return value instanceof Promise && value._tracked === true;\n}\n\nfunction unwrapTrackedPromise(value) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n\n  return value._data;\n}\n\nconst defer = function defer(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  return new DeferredData(data, responseInit);\n};\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\n\n\nconst redirect = function redirect(url, init) {\n  if (init === void 0) {\n    init = 302;\n  }\n\n  let responseInit = init;\n\n  if (typeof responseInit === \"number\") {\n    responseInit = {\n      status: responseInit\n    };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  return new Response(null, _extends({}, responseInit, {\n    headers\n  }));\n};\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\n\n\nclass ErrorResponse {\n  constructor(status, statusText, data, internal) {\n    if (internal === void 0) {\n      internal = false;\n    }\n\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n\n}\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\n\n\nfunction isRouteErrorResponse(error) {\n  return error != null && typeof error.status === \"number\" && typeof error.statusText === \"string\" && typeof error.internal === \"boolean\" && \"data\" in error;\n}\n\nconst validMutationMethodsArr = [\"post\", \"put\", \"patch\", \"delete\"];\nconst validMutationMethods = new Set(validMutationMethodsArr);\nconst validRequestMethodsArr = [\"get\", ...validMutationMethodsArr];\nconst validRequestMethods = new Set(validRequestMethodsArr);\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\nconst IDLE_NAVIGATION = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n};\nconst IDLE_FETCHER = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n};\nconst IDLE_BLOCKER = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined\n};\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\nconst isBrowser = typeof window !== \"undefined\" && typeof window.document !== \"undefined\" && typeof window.document.createElement !== \"undefined\";\nconst isServer = !isBrowser; //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\n\nfunction createRouter(init) {\n  invariant(init.routes.length > 0, \"You must provide a non-empty routes array to createRouter\");\n  let dataRoutes = convertRoutesToDataRoutes(init.routes); // Cleanup function for history\n\n  let unlistenHistory = null; // Externally-provided functions to call on all state changes\n\n  let subscribers = new Set(); // Externally-provided object to hold scroll restoration locations during routing\n\n  let savedScrollPositions = null; // Externally-provided function to get scroll restoration keys\n\n  let getScrollRestorationKey = null; // Externally-provided function to get current scroll position\n\n  let getScrollPosition = null; // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n\n  let initialScrollRestored = init.hydrationData != null;\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, init.basename);\n  let initialErrors = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname\n    });\n    let {\n      matches,\n      route\n    } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = {\n      [route.id]: error\n    };\n  }\n\n  let initialized = !initialMatches.some(m => m.route.loader) || init.hydrationData != null;\n  let router;\n  let state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: init.hydrationData && init.hydrationData.loaderData || {},\n    actionData: init.hydrationData && init.hydrationData.actionData || null,\n    errors: init.hydrationData && init.hydrationData.errors || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map()\n  }; // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n\n  let pendingAction = Action.Pop; // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n\n  let pendingPreventScrollReset = false; // AbortController for the active navigation\n\n  let pendingNavigationController; // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n\n  let isUninterruptedRevalidation = false; // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidate()\n  //  - X-Remix-Revalidate (from redirect)\n\n  let isRevalidationRequired = false; // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n\n  let cancelledDeferredRoutes = []; // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n\n  let cancelledFetcherLoads = []; // AbortControllers for any in-flight fetchers\n\n  let fetchControllers = new Map(); // Track loads based on the order in which they started\n\n  let incrementingLoadId = 0; // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n\n  let pendingNavigationLoadId = -1; // Fetchers that triggered data reloads as a result of their actions\n\n  let fetchReloadIds = new Map(); // Fetchers that triggered redirect navigations from their actions\n\n  let fetchRedirectIds = new Set(); // Most recent href/match for fetcher.load calls for fetchers\n\n  let fetchLoadMatches = new Map(); // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n\n  let activeDeferreds = new Map(); // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n\n  let blockerFunctions = new Map(); // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n\n  let ignoreNextHistoryUpdate = false; // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(_ref => {\n      let {\n        action: historyAction,\n        location,\n        delta\n      } = _ref; // Ignore this event if it was just us resetting the URL from a\n      // blocked POP navigation\n\n      if (ignoreNextHistoryUpdate) {\n        ignoreNextHistoryUpdate = false;\n        return;\n      }\n\n      warning(blockerFunctions.size === 0 || delta != null, \"You are trying to use a blocker on a POP navigation to a location \" + \"that was not created by @remix-run/router. This will fail silently in \" + \"production. This can happen if you are navigating outside the router \" + \"via `window.history.pushState`/`window.location.hash` instead of using \" + \"router navigation APIs.  This can also happen if you are using \" + \"createHashRouter and the user manually changes the URL.\");\n      let blockerKey = shouldBlockNavigation({\n        currentLocation: state.location,\n        nextLocation: location,\n        historyAction\n      });\n\n      if (blockerKey && delta != null) {\n        // Restore the URL to match the current UI, but don't update router state\n        ignoreNextHistoryUpdate = true;\n        init.history.go(delta * -1); // Put the blocker into a blocked state\n\n        updateBlocker(blockerKey, {\n          state: \"blocked\",\n          location,\n\n          proceed() {\n            updateBlocker(blockerKey, {\n              state: \"proceeding\",\n              proceed: undefined,\n              reset: undefined,\n              location\n            }); // Re-do the same POP navigation we just blocked\n\n            init.history.go(delta);\n          },\n\n          reset() {\n            deleteBlocker(blockerKey);\n            updateState({\n              blockers: new Map(router.state.blockers)\n            });\n          }\n\n        });\n        return;\n      }\n\n      return startNavigation(historyAction, location);\n    }); // Kick off initial data load if needed.  Use Pop to avoid modifying history\n\n    if (!state.initialized) {\n      startNavigation(Action.Pop, state.location);\n    }\n\n    return router;\n  } // Clean up a router and it's side effects\n\n\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  } // Subscribe to state updates for the router\n\n\n  function subscribe(fn) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  } // Update our state and notify the calling context of the change\n\n\n  function updateState(newState) {\n    state = _extends({}, state, newState);\n    subscribers.forEach(subscriber => subscriber(state));\n  } // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n\n\n  function completeNavigation(location, newState) {\n    var _location$state, _location$state2; // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n\n\n    let isActionReload = state.actionData != null && state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && state.navigation.state === \"loading\" && ((_location$state = location.state) == null ? void 0 : _location$state._isRedirect) !== true;\n    let actionData;\n\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    } // Always preserve any existing loaderData from re-used routes\n\n\n    let loaderData = newState.loaderData ? mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [], newState.errors) : state.loaderData; // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n\n    for (let [key] of blockerFunctions) {\n      deleteBlocker(key);\n    } // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n\n\n    let preventScrollReset = pendingPreventScrollReset === true || state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && ((_location$state2 = location.state) == null ? void 0 : _location$state2._isRedirect) !== true;\n    updateState(_extends({}, newState, {\n      actionData,\n      loaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      restoreScrollPosition: getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset,\n      blockers: new Map(state.blockers)\n    }));\n    if (isUninterruptedRevalidation) ;else if (pendingAction === Action.Pop) ;else if (pendingAction === Action.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === Action.Replace) {\n      init.history.replace(location, location.state);\n    } // Reset stateful navigation vars\n\n    pendingAction = Action.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  } // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n\n\n  async function navigate(to, opts) {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(to, opts);\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state); // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n\n    nextLocation = _extends({}, nextLocation, init.history.encodeLocation(nextLocation));\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n    let historyAction = Action.Push;\n\n    if (userReplace === true) {\n      historyAction = Action.Replace;\n    } else if (userReplace === false) ;else if (submission != null && isMutationMethod(submission.formMethod) && submission.formAction === state.location.pathname + state.location.search) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = Action.Replace;\n    }\n\n    let preventScrollReset = opts && \"preventScrollReset\" in opts ? opts.preventScrollReset === true : undefined;\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction\n    });\n\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n\n        proceed() {\n          updateBlocker(blockerKey, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation\n          }); // Send the same navigation through\n\n          navigate(to, opts);\n        },\n\n        reset() {\n          deleteBlocker(blockerKey);\n          updateState({\n            blockers: new Map(state.blockers)\n          });\n        }\n\n      });\n      return;\n    }\n\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace\n    });\n  } // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n\n\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({\n      revalidation: \"loading\"\n    }); // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n\n    if (state.navigation.state === \"submitting\") {\n      return;\n    } // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n\n\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return;\n    } // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n\n\n    startNavigation(pendingAction || state.historyAction, state.navigation.location, {\n      overrideNavigation: state.navigation\n    });\n  } // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n\n\n  async function startNavigation(historyAction, location, opts) {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true; // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(dataRoutes, location, init.basename); // Short circuit with a 404 on the root error boundary if we match nothing\n\n    if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes); // Cancel all pending deferred on 404s since we don't keep any routes\n\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error\n        }\n      });\n      return;\n    } // Short circuit if it's only a hash change and not a mutation submission\n    // For example, on /page#hash and submit a <Form method=\"post\"> which will\n    // default to a navigation to /page\n\n\n    if (isHashChangeOnly(state.location, location) && !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))) {\n      completeNavigation(location, {\n        matches\n      });\n      return;\n    } // Create a controller/Request for this navigation\n\n\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(init.history, location, pendingNavigationController.signal, opts && opts.submission);\n    let pendingActionData;\n    let pendingError;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError\n      };\n    } else if (opts && opts.submission && isMutationMethod(opts.submission.formMethod)) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(request, location, opts.submission, matches, {\n        replace: opts.replace\n      });\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n\n      let navigation = _extends({\n        state: \"loading\",\n        location\n      }, opts.submission);\n\n      loadingNavigation = navigation; // Create a GET request for the loaders\n\n      request = new Request(request.url, {\n        signal: request.signal\n      });\n    } // Call loaders\n\n\n    let {\n      shortCircuited,\n      loaderData,\n      errors\n    } = await handleLoaders(request, location, matches, loadingNavigation, opts && opts.submission, opts && opts.replace, pendingActionData, pendingError);\n\n    if (shortCircuited) {\n      return;\n    } // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n\n\n    pendingNavigationController = null;\n    completeNavigation(location, _extends({\n      matches\n    }, pendingActionData ? {\n      actionData: pendingActionData\n    } : {}, {\n      loaderData,\n      errors\n    }));\n  } // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n\n\n  async function handleAction(request, location, submission, matches, opts) {\n    interruptActiveLoads(); // Put us in a submitting state\n\n    let navigation = _extends({\n      state: \"submitting\",\n      location\n    }, submission);\n\n    updateState({\n      navigation\n    }); // Call our action and get the result\n\n    let result;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id\n        })\n      };\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch, matches, router.basename);\n\n      if (request.signal.aborted) {\n        return {\n          shortCircuited: true\n        };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let replace;\n\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        replace = result.location === state.location.pathname + state.location.search;\n      }\n\n      await startRedirectNavigation(state, result, {\n        submission,\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id); // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n\n      if ((opts && opts.replace) !== true) {\n        pendingAction = Action.Push;\n      }\n\n      return {\n        // Send back an empty object we can use to clear out any prior actionData\n        pendingActionData: {},\n        pendingActionError: {\n          [boundaryMatch.route.id]: result.error\n        }\n      };\n    }\n\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    }\n\n    return {\n      pendingActionData: {\n        [actionMatch.route.id]: result.data\n      }\n    };\n  } // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n\n\n  async function handleLoaders(request, location, matches, overrideNavigation, submission, replace, pendingActionData, pendingError) {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation;\n\n    if (!loadingNavigation) {\n      let navigation = _extends({\n        state: \"loading\",\n        location,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined\n      }, submission);\n\n      loadingNavigation = navigation;\n    } // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n\n\n    let activeSubmission = submission ? submission : loadingNavigation.formMethod && loadingNavigation.formAction && loadingNavigation.formData && loadingNavigation.formEncType ? {\n      formMethod: loadingNavigation.formMethod,\n      formAction: loadingNavigation.formAction,\n      formData: loadingNavigation.formData,\n      formEncType: loadingNavigation.formEncType\n    } : undefined;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, activeSubmission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, pendingActionData, pendingError, fetchLoadMatches); // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n\n    cancelActiveDeferreds(routeId => !(matches && matches.some(m => m.route.id === routeId)) || matchesToLoad && matchesToLoad.some(m => m.route.id === routeId)); // Short circuit if we have no loaders to run\n\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      completeNavigation(location, _extends({\n        matches,\n        loaderData: {},\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null\n      }, pendingActionData ? {\n        actionData: pendingActionData\n      } : {}));\n      return {\n        shortCircuited: true\n      };\n    } // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n\n\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach(rf => {\n        let fetcher = state.fetchers.get(rf.key);\n        let revalidatingFetcher = {\n          state: \"loading\",\n          data: fetcher && fetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n          \" _hasFetcherDoneAnything \": true\n        };\n        state.fetchers.set(rf.key, revalidatingFetcher);\n      });\n      let actionData = pendingActionData || state.actionData;\n      updateState(_extends({\n        navigation: loadingNavigation\n      }, actionData ? Object.keys(actionData).length === 0 ? {\n        actionData: null\n      } : {\n        actionData\n      } : {}, revalidatingFetchers.length > 0 ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n    }\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n    revalidatingFetchers.forEach(rf => fetchControllers.set(rf.key, pendingNavigationController));\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, request);\n\n    if (request.signal.aborted) {\n      return {\n        shortCircuited: true\n      };\n    } // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n\n\n    revalidatingFetchers.forEach(rf => fetchControllers.delete(rf.key)); // If any loaders returned a redirect Response, start a new REPLACE navigation\n\n    let redirect = findRedirect(results);\n\n    if (redirect) {\n      await startRedirectNavigation(state, redirect, {\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    } // Process and commit output from loaders\n\n\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, matches, matchesToLoad, loaderResults, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds); // Wire up subscribers to update loaderData as promises settle\n\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe(aborted => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n    markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    return _extends({\n      loaderData,\n      errors\n    }, didAbortFetchLoads || revalidatingFetchers.length > 0 ? {\n      fetchers: new Map(state.fetchers)\n    } : {});\n  }\n\n  function getFetcher(key) {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  } // Trigger a fetcher load/submit for the given fetcher key\n\n\n  function fetch(key, routeId, href, opts) {\n    if (isServer) {\n      throw new Error(\"router.fetch() was called during the server render, but it shouldn't be. \" + \"You are likely calling a useFetcher() method in the body of your component. \" + \"Try moving it to a useEffect or a callback.\");\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n    let matches = matchRoutes(dataRoutes, href, init.basename);\n\n    if (!matches) {\n      setFetcherError(key, routeId, getInternalRouterError(404, {\n        pathname: href\n      }));\n      return;\n    }\n\n    let {\n      path,\n      submission\n    } = normalizeNavigateOptions(href, opts, true);\n    let match = getTargetMatch(matches, path);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, submission);\n      return;\n    } // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n\n\n    fetchLoadMatches.set(key, {\n      routeId,\n      path,\n      match,\n      matches\n    });\n    handleFetcherLoader(key, routeId, path, match, matches, submission);\n  } // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n\n\n  async function handleFetcherAction(key, routeId, path, match, requestMatches, submission) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    if (!match.route.action) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId\n      });\n      setFetcherError(key, routeId, error);\n      return;\n    } // Put this fetcher into it's submitting state\n\n\n    let existingFetcher = state.fetchers.get(key);\n\n    let fetcher = _extends({\n      state: \"submitting\"\n    }, submission, {\n      data: existingFetcher && existingFetcher.data,\n      \" _hasFetcherDoneAnything \": true\n    });\n\n    state.fetchers.set(key, fetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }); // Call the action for the fetcher\n\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal, submission);\n    fetchControllers.set(key, abortController);\n    let actionResult = await callLoaderOrAction(\"action\", fetchRequest, match, requestMatches, router.basename);\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by ou our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n\n      return;\n    }\n\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      fetchRedirectIds.add(key);\n\n      let loadingFetcher = _extends({\n        state: \"loading\"\n      }, submission, {\n        data: undefined,\n        \" _hasFetcherDoneAnything \": true\n      });\n\n      state.fetchers.set(key, loadingFetcher);\n      updateState({\n        fetchers: new Map(state.fetchers)\n      });\n      return startRedirectNavigation(state, actionResult, {\n        isFetchActionRedirect: true\n      });\n    } // Process any non-redirect errors thrown\n\n\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    } // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n\n\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(init.history, nextLocation, abortController.signal);\n    let matches = state.navigation.state !== \"idle\" ? matchRoutes(dataRoutes, state.navigation.location, init.basename) : state.matches;\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher = _extends({\n      state: \"loading\",\n      data: actionResult.data\n    }, submission, {\n      \" _hasFetcherDoneAnything \": true\n    });\n\n    state.fetchers.set(key, loadFetcher);\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, submission, nextLocation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, {\n      [match.route.id]: actionResult.data\n    }, undefined, // No need to send through errors since we short circuit above\n    fetchLoadMatches); // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n\n    revalidatingFetchers.filter(rf => rf.key !== key).forEach(rf => {\n      let staleKey = rf.key;\n      let existingFetcher = state.fetchers.get(staleKey);\n      let revalidatingFetcher = {\n        state: \"loading\",\n        data: existingFetcher && existingFetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true\n      };\n      state.fetchers.set(staleKey, revalidatingFetcher);\n      fetchControllers.set(staleKey, abortController);\n    });\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(r => fetchControllers.delete(r.key));\n    let redirect = findRedirect(results);\n\n    if (redirect) {\n      return startRedirectNavigation(state, redirect);\n    } // Process and commit output from loaders\n\n\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, state.matches, matchesToLoad, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds);\n    let doneFetcher = {\n      state: \"idle\",\n      data: actionResult.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      \" _hasFetcherDoneAnything \": true\n    };\n    state.fetchers.set(key, doneFetcher);\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId); // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n\n    if (state.navigation.state === \"loading\" && loadId > pendingNavigationLoadId) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers)\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState(_extends({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches, errors)\n      }, didAbortFetchLoads ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n      isRevalidationRequired = false;\n    }\n  } // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n\n\n  async function handleFetcherLoader(key, routeId, path, match, matches, submission) {\n    let existingFetcher = state.fetchers.get(key); // Put this fetcher into it's loading state\n\n    let loadingFetcher = _extends({\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined\n    }, submission, {\n      data: existingFetcher && existingFetcher.data,\n      \" _hasFetcherDoneAnything \": true\n    });\n\n    state.fetchers.set(key, loadingFetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }); // Call the loader for this fetcher route match\n\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal);\n    fetchControllers.set(key, abortController);\n    let result = await callLoaderOrAction(\"loader\", fetchRequest, match, matches, router.basename); // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n\n    if (isDeferredResult(result)) {\n      result = (await resolveDeferredData(result, fetchRequest.signal, true)) || result;\n    } // We can delete this so long as we weren't aborted by ou our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n\n\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    } // If the loader threw a redirect Response, start a new REPLACE navigation\n\n\n    if (isRedirectResult(result)) {\n      await startRedirectNavigation(state, result);\n      return;\n    } // Process any non-redirect errors thrown\n\n\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key); // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error\n        }\n      });\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\"); // Put the fetcher back into an idle state\n\n    let doneFetcher = {\n      state: \"idle\",\n      data: result.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      \" _hasFetcherDoneAnything \": true\n    };\n    state.fetchers.set(key, doneFetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n\n\n  async function startRedirectNavigation(state, redirect, _temp) {\n    var _window;\n\n    let {\n      submission,\n      replace,\n      isFetchActionRedirect\n    } = _temp === void 0 ? {} : _temp;\n\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n\n    let redirectLocation = createLocation(state.location, redirect.location, // TODO: This can be removed once we get rid of useTransition in Remix v2\n    _extends({\n      _isRedirect: true\n    }, isFetchActionRedirect ? {\n      _isFetchActionRedirect: true\n    } : {}));\n    invariant(redirectLocation, \"Expected a location on the redirect navigation\"); // Check if this an absolute external redirect that goes to a new origin\n\n    if (ABSOLUTE_URL_REGEX.test(redirect.location) && isBrowser && typeof ((_window = window) == null ? void 0 : _window.location) !== \"undefined\") {\n      let newOrigin = init.history.createURL(redirect.location).origin;\n\n      if (window.location.origin !== newOrigin) {\n        if (replace) {\n          window.location.replace(redirect.location);\n        } else {\n          window.location.assign(redirect.location);\n        }\n\n        return;\n      }\n    } // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n\n\n    pendingNavigationController = null;\n    let redirectHistoryAction = replace === true ? Action.Replace : Action.Push; // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n\n    let {\n      formMethod,\n      formAction,\n      formEncType,\n      formData\n    } = state.navigation;\n\n    if (!submission && formMethod && formAction && formData && formEncType) {\n      submission = {\n        formMethod,\n        formAction,\n        formEncType,\n        formData\n      };\n    } // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n\n\n    if (redirectPreserveMethodStatusCodes.has(redirect.status) && submission && isMutationMethod(submission.formMethod)) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: _extends({}, submission, {\n          formAction: redirect.location\n        }),\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset\n      });\n    } else {\n      // Otherwise, we kick off a new loading navigation, preserving the\n      // submission info for the duration of this navigation\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation: {\n          state: \"loading\",\n          location: redirectLocation,\n          formMethod: submission ? submission.formMethod : undefined,\n          formAction: submission ? submission.formAction : undefined,\n          formEncType: submission ? submission.formEncType : undefined,\n          formData: submission ? submission.formData : undefined\n        },\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset\n      });\n    }\n  }\n\n  async function callLoadersAndMaybeResolveData(currentMatches, matches, matchesToLoad, fetchersToLoad, request) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([...matchesToLoad.map(match => callLoaderOrAction(\"loader\", request, match, matches, router.basename)), ...fetchersToLoad.map(f => callLoaderOrAction(\"loader\", createClientSideRequest(init.history, f.path, request.signal), f.match, f.matches, router.basename))]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n    await Promise.all([resolveDeferredResults(currentMatches, matchesToLoad, loaderResults, request.signal, false, state.loaderData), resolveDeferredResults(currentMatches, fetchersToLoad.map(f => f.match), fetcherResults, request.signal, true)]);\n    return {\n      results,\n      loaderResults,\n      fetcherResults\n    };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true; // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds()); // Abort in-flight fetcher loads\n\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function setFetcherError(key, routeId, error) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error\n      },\n      fetchers: new Map(state.fetchers)\n    });\n  }\n\n  function deleteFetcher(key) {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, \"Expected fetch controller: \" + key);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = {\n        state: \"idle\",\n        data: fetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone() {\n    let doneKeys = [];\n\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, \"Expected fetcher: \" + key);\n\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n      }\n    }\n\n    markFetchersDone(doneKeys);\n  }\n\n  function abortStaleFetchLoads(landedId) {\n    let yeetedKeys = [];\n\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, \"Expected fetcher: \" + key);\n\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function getBlocker(key, fn) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n\n    return blocker;\n  }\n\n  function deleteBlocker(key) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  } // Utility function to update blockers, ensuring valid state transitions\n\n\n  function updateBlocker(key, newBlocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER; // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n\n    invariant(blocker.state === \"unblocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"proceeding\" || blocker.state === \"blocked\" && newBlocker.state === \"unblocked\" || blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\", \"Invalid blocker state transition: \" + blocker.state + \" -> \" + newBlocker.state);\n    state.blockers.set(key, newBlocker);\n    updateState({\n      blockers: new Map(state.blockers)\n    });\n  }\n\n  function shouldBlockNavigation(_ref2) {\n    let {\n      currentLocation,\n      nextLocation,\n      historyAction\n    } = _ref2;\n\n    if (blockerFunctions.size === 0) {\n      return;\n    } // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n\n\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    } // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n\n\n    if (blockerFunction({\n      currentLocation,\n      nextLocation,\n      historyAction\n    })) {\n      return blockerKey;\n    }\n  }\n\n  function cancelActiveDeferreds(predicate) {\n    let cancelledRouteIds = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  } // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n\n\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n\n    getScrollRestorationKey = getKey || (location => location.key); // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n\n\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n\n      if (y != null) {\n        updateState({\n          restoreScrollPosition: y\n        });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map(m => createUseMatchesMatch(m, state.loaderData));\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map(m => createUseMatchesMatch(m, state.loaderData));\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      let y = savedScrollPositions[key];\n\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n\n    return null;\n  }\n\n  router = {\n    get basename() {\n      return init.basename;\n    },\n\n    get state() {\n      return state;\n    },\n\n    get routes() {\n      return dataRoutes;\n    },\n\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: to => init.history.createHref(to),\n    encodeLocation: to => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds\n  };\n  return router;\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\n\nconst UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\n\nfunction createStaticHandler(routes, opts) {\n  invariant(routes.length > 0, \"You must provide a non-empty routes array to createStaticHandler\");\n  let dataRoutes = convertRoutesToDataRoutes(routes);\n  let basename = (opts ? opts.basename : null) || \"/\";\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n\n  async function query(request, _temp2) {\n    let {\n      requestContext\n    } = _temp2 === void 0 ? {} : _temp2;\n    let url = new URL(request.url);\n    let method = request.method.toLowerCase();\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename); // SSR supports HEAD requests while SPA doesn't\n\n    if (!isValidMethod(method) && method !== \"head\") {\n      let error = getInternalRouterError(405, {\n        method\n      });\n      let {\n        matches: methodNotAllowedMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n\n    let result = await queryImpl(request, location, matches, requestContext);\n\n    if (isResponse(result)) {\n      return result;\n    } // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n\n\n    return _extends({\n      location,\n      basename\n    }, result);\n  }\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n\n\n  async function queryRoute(request, _temp3) {\n    let {\n      routeId,\n      requestContext\n    } = _temp3 === void 0 ? {} : _temp3;\n    let url = new URL(request.url);\n    let method = request.method.toLowerCase();\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename); // SSR supports HEAD requests while SPA doesn't\n\n    if (!isValidMethod(method) && method !== \"head\" && method !== \"options\") {\n      throw getInternalRouterError(405, {\n        method\n      });\n    } else if (!matches) {\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n\n    let match = routeId ? matches.find(m => m.route.id === routeId) : getTargetMatch(matches, location);\n\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n\n    let result = await queryImpl(request, location, matches, requestContext, match);\n\n    if (isResponse(result)) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    } // Pick off the right state value to return\n\n\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n\n    if (result.loaderData) {\n      var _result$activeDeferre;\n\n      let data = Object.values(result.loaderData)[0];\n\n      if ((_result$activeDeferre = result.activeDeferreds) != null && _result$activeDeferre[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n\n      return data;\n    }\n\n    return undefined;\n  }\n\n  async function queryImpl(request, location, matches, requestContext, routeMatch) {\n    invariant(request.signal, \"query()/queryRoute() requests must contain an AbortController signal\");\n\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(request, matches, routeMatch || getTargetMatch(matches, location), requestContext, routeMatch != null);\n        return result;\n      }\n\n      let result = await loadRouteData(request, matches, requestContext, routeMatch);\n      return isResponse(result) ? result : _extends({}, result, {\n        actionData: null,\n        actionHeaders: {}\n      });\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error && !isRedirectResponse(e.response)) {\n          throw e.response;\n        }\n\n        return e.response;\n      } // Redirects are always returned since they don't propagate to catch\n      // boundaries\n\n\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n\n      throw e;\n    }\n  }\n\n  async function submit(request, matches, actionMatch, requestContext, isRouteRequest) {\n    let result;\n\n    if (!actionMatch.route.action) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id\n      });\n\n      if (isRouteRequest) {\n        throw error;\n      }\n\n      result = {\n        type: ResultType.error,\n        error\n      };\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch, matches, basename, true, isRouteRequest, requestContext);\n\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(method + \"() call aborted\");\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location\n        }\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n\n      if (isRouteRequest) {\n        throw error;\n      }\n\n      result = {\n        type: ResultType.error,\n        error\n      };\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: {\n          [actionMatch.route.id]: result.data\n        },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(request, matches, requestContext, undefined, {\n        [boundaryMatch.route.id]: result.error\n      }); // action status codes take precedence over loader status codes\n\n      return _extends({}, context, {\n        statusCode: isRouteErrorResponse(result.error) ? result.error.status : 500,\n        actionData: null,\n        actionHeaders: _extends({}, result.headers ? {\n          [actionMatch.route.id]: result.headers\n        } : {})\n      });\n    } // Create a GET request for the loaders\n\n\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal\n    });\n    let context = await loadRouteData(loaderRequest, matches, requestContext);\n    return _extends({}, context, result.statusCode ? {\n      statusCode: result.statusCode\n    } : {}, {\n      actionData: {\n        [actionMatch.route.id]: result.data\n      },\n      actionHeaders: _extends({}, result.headers ? {\n        [actionMatch.route.id]: result.headers\n      } : {})\n    });\n  }\n\n  async function loadRouteData(request, matches, requestContext, routeMatch, pendingActionError) {\n    let isRouteRequest = routeMatch != null; // Short circuit if we have no loaders to run (queryRoute())\n\n    if (isRouteRequest && !(routeMatch != null && routeMatch.route.loader)) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch == null ? void 0 : routeMatch.route.id\n      });\n    }\n\n    let requestMatches = routeMatch ? [routeMatch] : getLoaderMatchesUntilBoundary(matches, Object.keys(pendingActionError || {})[0]);\n    let matchesToLoad = requestMatches.filter(m => m.route.loader); // Short circuit if we have no loaders to run (query())\n\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce((acc, m) => Object.assign(acc, {\n          [m.route.id]: null\n        }), {}),\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null\n      };\n    }\n\n    let results = await Promise.all([...matchesToLoad.map(match => callLoaderOrAction(\"loader\", request, match, matches, basename, true, isRouteRequest, requestContext))]);\n\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(method + \"() call aborted\");\n    } // Process and commit output from loaders\n\n\n    let activeDeferreds = new Map();\n    let context = processRouteLoaderData(matches, matchesToLoad, results, pendingActionError, activeDeferreds); // Add a null for any non-loader matches for proper revalidation on the client\n\n    let executedLoaders = new Set(matchesToLoad.map(match => match.route.id));\n    matches.forEach(match => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n    return _extends({}, context, {\n      matches,\n      activeDeferreds: activeDeferreds.size > 0 ? Object.fromEntries(activeDeferreds.entries()) : null\n    });\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute\n  };\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\n\n\nfunction getStaticContextFromError(routes, context, error) {\n  let newContext = _extends({}, context, {\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error\n    }\n  });\n\n  return newContext;\n}\n\nfunction isSubmissionNavigation(opts) {\n  return opts != null && \"formData\" in opts;\n} // Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\n\n\nfunction normalizeNavigateOptions(to, opts, isFetcher) {\n  if (isFetcher === void 0) {\n    isFetcher = false;\n  }\n\n  let path = typeof to === \"string\" ? to : createPath(to); // Return location verbatim on non-submission navigations\n\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return {\n      path\n    };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, {\n        method: opts.formMethod\n      })\n    };\n  } // Create a Submission on non-GET navigations\n\n\n  let submission;\n\n  if (opts.formData) {\n    submission = {\n      formMethod: opts.formMethod || \"get\",\n      formAction: stripHashFromPath(path),\n      formEncType: opts && opts.formEncType || \"application/x-www-form-urlencoded\",\n      formData: opts.formData\n    };\n\n    if (isMutationMethod(submission.formMethod)) {\n      return {\n        path,\n        submission\n      };\n    }\n  } // Flatten submission onto URLSearchParams for GET submissions\n\n\n  let parsedPath = parsePath(path);\n  let searchParams = convertFormDataToSearchParams(opts.formData); // Since fetcher GET submissions only run a single loader (as opposed to\n  // navigation GET submissions which run all loaders), we need to preserve\n  // any incoming ?index params\n\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n\n  parsedPath.search = \"?\" + searchParams;\n  return {\n    path: createPath(parsedPath),\n    submission\n  };\n} // Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\n\n\nfunction getLoaderMatchesUntilBoundary(matches, boundaryId) {\n  let boundaryMatches = matches;\n\n  if (boundaryId) {\n    let index = matches.findIndex(m => m.route.id === boundaryId);\n\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(history, state, matches, submission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, pendingActionData, pendingError, fetchLoadMatches) {\n  let actionResult = pendingError ? Object.values(pendingError)[0] : pendingActionData ? Object.values(pendingActionData)[0] : undefined;\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n  let defaultShouldRevalidate = // Forced revalidation due to submission, useRevalidate, or X-Remix-Revalidate\n  isRevalidationRequired || // Clicked the same link, resubmitted a GET form\n  currentUrl.toString() === nextUrl.toString() || // Search params affect all loaders\n  currentUrl.search !== nextUrl.search; // Pick navigation matches that are net-new or qualify for revalidation\n\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    if (match.route.loader == null) {\n      return false;\n    } // Always call the loader on new route instances and pending defer cancellations\n\n\n    if (isNewLoader(state.loaderData, state.matches[index], match) || cancelledDeferredRoutes.some(id => id === match.route.id)) {\n      return true;\n    } // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n\n\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n    return shouldRevalidateLoader(match, _extends({\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params\n    }, submission, {\n      actionResult,\n      defaultShouldRevalidate: defaultShouldRevalidate || isNewRouteInstance(currentRouteMatch, nextRouteMatch)\n    }));\n  }); // Pick fetcher.loads that need to be revalidated\n\n  let revalidatingFetchers = [];\n  fetchLoadMatches && fetchLoadMatches.forEach((f, key) => {\n    if (!matches.some(m => m.route.id === f.routeId)) {\n      // This fetcher is not going to be present in the subsequent render so\n      // there's no need to revalidate it\n      return;\n    } else if (cancelledFetcherLoads.includes(key)) {\n      // This fetcher was cancelled from a prior action submission - force reload\n      revalidatingFetchers.push(_extends({\n        key\n      }, f));\n    } else {\n      // Revalidating fetchers are decoupled from the route matches since they\n      // hit a static href, so they _always_ check shouldRevalidate and the\n      // default is strictly if a revalidation is explicitly required (action\n      // submissions, useRevalidator, X-Remix-Revalidate).\n      let shouldRevalidate = shouldRevalidateLoader(f.match, _extends({\n        currentUrl,\n        currentParams: state.matches[state.matches.length - 1].params,\n        nextUrl,\n        nextParams: matches[matches.length - 1].params\n      }, submission, {\n        actionResult,\n        defaultShouldRevalidate\n      }));\n\n      if (shouldRevalidate) {\n        revalidatingFetchers.push(_extends({\n          key\n        }, f));\n      }\n    }\n  });\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  let isNew = // [a] -> [a, b]\n  !currentMatch || // [a, b] -> [a, c]\n  match.route.id !== currentMatch.route.id; // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n\n  let isMissingData = currentLoaderData[match.route.id] === undefined; // Always load if this is a net-new route or we don't yet have data\n\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(currentMatch, match) {\n  let currentPath = currentMatch.route.path;\n  return (// param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname || // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    currentPath != null && currentPath.endsWith(\"*\") && currentMatch.params[\"*\"] !== match.params[\"*\"]\n  );\n}\n\nfunction shouldRevalidateLoader(loaderMatch, arg) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return arg.defaultShouldRevalidate;\n}\n\nasync function callLoaderOrAction(type, request, match, matches, basename, isStaticRequest, isRouteRequest, requestContext) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n\n  if (isStaticRequest === void 0) {\n    isStaticRequest = false;\n  }\n\n  if (isRouteRequest === void 0) {\n    isRouteRequest = false;\n  }\n\n  let resultType;\n  let result; // Setup a promise we can race against so that abort signals short circuit\n\n  let reject;\n  let abortPromise = new Promise((_, r) => reject = r);\n\n  let onReject = () => reject();\n\n  request.signal.addEventListener(\"abort\", onReject);\n\n  try {\n    let handler = match.route[type];\n    invariant(handler, \"Could not find the \" + type + \" to run on the \\\"\" + match.route.id + \"\\\" route\");\n    result = await Promise.race([handler({\n      request,\n      params: match.params,\n      context: requestContext\n    }), abortPromise]);\n    invariant(result !== undefined, \"You defined \" + (type === \"action\" ? \"an action\" : \"a loader\") + \" for route \" + (\"\\\"\" + match.route.id + \"\\\" but didn't return anything from your `\" + type + \"` \") + \"function. Please return a value or `null`.\");\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    request.signal.removeEventListener(\"abort\", onReject);\n  }\n\n  if (isResponse(result)) {\n    let status = result.status; // Process redirects\n\n    if (redirectStatusCodes.has(status)) {\n      let location = result.headers.get(\"Location\");\n      invariant(location, \"Redirects returned/thrown from loaders/actions must have a Location header\"); // Support relative routing in internal redirects\n\n      if (!ABSOLUTE_URL_REGEX.test(location)) {\n        let activeMatches = matches.slice(0, matches.indexOf(match) + 1);\n        let routePathnames = getPathContributingMatches(activeMatches).map(match => match.pathnameBase);\n        let resolvedLocation = resolveTo(location, routePathnames, new URL(request.url).pathname);\n        invariant(createPath(resolvedLocation), \"Unable to resolve redirect location: \" + location); // Prepend the basename to the redirect location if we have one\n\n        if (basename) {\n          let path = resolvedLocation.pathname;\n          resolvedLocation.pathname = path === \"/\" ? basename : joinPaths([basename, path]);\n        }\n\n        location = createPath(resolvedLocation);\n      } else if (!isStaticRequest) {\n        // Strip off the protocol+origin for same-origin absolute redirects.\n        // If this is a static reques, we can let it go back to the browser\n        // as-is\n        let currentUrl = new URL(request.url);\n        let url = location.startsWith(\"//\") ? new URL(currentUrl.protocol + location) : new URL(location);\n\n        if (url.origin === currentUrl.origin) {\n          location = url.pathname + url.search + url.hash;\n        }\n      } // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n\n\n      if (isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null\n      };\n    } // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n\n\n    if (isRouteRequest) {\n      // eslint-disable-next-line no-throw-literal\n      throw {\n        type: resultType || ResultType.data,\n        response: result\n      };\n    }\n\n    let data;\n    let contentType = result.headers.get(\"Content-Type\"); // Check between word boundaries instead of startsWith() due to the last\n    // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n\n    if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponse(status, result.statusText, data),\n        headers: result.headers\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers\n    };\n  }\n\n  if (resultType === ResultType.error) {\n    return {\n      type: resultType,\n      error: result\n    };\n  }\n\n  if (result instanceof DeferredData) {\n    return {\n      type: ResultType.deferred,\n      deferredData: result\n    };\n  }\n\n  return {\n    type: ResultType.data,\n    data: result\n  };\n} // Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\n\n\nfunction createClientSideRequest(history, location, signal, submission) {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init = {\n    signal\n  };\n\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let {\n      formMethod,\n      formEncType,\n      formData\n    } = submission;\n    init.method = formMethod.toUpperCase();\n    init.body = formEncType === \"application/x-www-form-urlencoded\" ? convertFormDataToSearchParams(formData) : formData;\n  } // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n\n\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData) {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, value instanceof File ? value.name : value);\n  }\n\n  return searchParams;\n}\n\nfunction processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds) {\n  // Fill in loaderData/errors from our loaders\n  let loaderData = {};\n  let errors = null;\n  let statusCode;\n  let foundError = false;\n  let loaderHeaders = {}; // Process loader results into state.loaderData/state.errors\n\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(!isRedirectResult(result), \"Cannot handle redirect results in processLoaderData\");\n\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error; // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n\n      errors = errors || {}; // Prefer higher error values if lower errors bubble to the same boundary\n\n      if (errors[boundaryMatch.route.id] == null) {\n        errors[boundaryMatch.route.id] = error;\n      } // Clear our any prior loaderData for the throwing route\n\n\n      loaderData[id] = undefined; // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;\n      }\n\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n      } else {\n        loaderData[id] = result.data;\n      } // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n\n\n      if (result.statusCode != null && result.statusCode !== 200 && !foundError) {\n        statusCode = result.statusCode;\n      }\n\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  }); // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n\n  if (pendingError) {\n    errors = pendingError;\n    loaderData[Object.keys(pendingError)[0]] = undefined;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders\n  };\n}\n\nfunction processLoaderData(state, matches, matchesToLoad, results, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds) {\n  let {\n    loaderData,\n    errors\n  } = processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds); // Process results from our revalidating fetchers\n\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let {\n      key,\n      match\n    } = revalidatingFetchers[index];\n    invariant(fetcherResults !== undefined && fetcherResults[index] !== undefined, \"Did not find corresponding fetcher result\");\n    let result = fetcherResults[index]; // Process fetcher non-redirect errors\n\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match.route.id);\n\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = _extends({}, errors, {\n          [boundaryMatch.route.id]: result.error\n        });\n      }\n\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return {\n    loaderData,\n    errors\n  };\n}\n\nfunction mergeLoaderData(loaderData, newLoaderData, matches, errors) {\n  let mergedLoaderData = _extends({}, newLoaderData);\n\n  for (let match of matches) {\n    let id = match.route.id;\n\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      }\n    } else if (loaderData[id] !== undefined) {\n      mergedLoaderData[id] = loaderData[id];\n    }\n\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n\n  return mergedLoaderData;\n} // Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\n\n\nfunction findNearestBoundary(matches, routeId) {\n  let eligibleMatches = routeId ? matches.slice(0, matches.findIndex(m => m.route.id === routeId) + 1) : [...matches];\n  return eligibleMatches.reverse().find(m => m.route.hasErrorBoundary === true) || matches[0];\n}\n\nfunction getShortCircuitMatches(routes) {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find(r => r.index || !r.path || r.path === \"/\") || {\n    id: \"__shim-error-route__\"\n  };\n  return {\n    matches: [{\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route\n    }],\n    route\n  };\n}\n\nfunction getInternalRouterError(status, _temp4) {\n  let {\n    pathname,\n    routeId,\n    method,\n    type\n  } = _temp4 === void 0 ? {} : _temp4;\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide a `loader` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = \"Route \\\"\" + routeId + \"\\\" does not match URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = \"No route matches URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method.toUpperCase() + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide an `action` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (method) {\n      errorMessage = \"Invalid request method \\\"\" + method.toUpperCase() + \"\\\"\";\n    }\n  }\n\n  return new ErrorResponse(status || 500, statusText, new Error(errorMessage), true);\n} // Find any returned redirect errors, starting from the lowest match\n\n\nfunction findRedirect(results) {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\n\nfunction stripHashFromPath(path) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath(_extends({}, parsedPath, {\n    hash: \"\"\n  }));\n}\n\nfunction isHashChangeOnly(a, b) {\n  return a.pathname === b.pathname && a.search === b.search && a.hash !== b.hash;\n}\n\nfunction isDeferredResult(result) {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result) {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result) {\n  return (result && result.type) === ResultType.redirect;\n}\n\nfunction isResponse(value) {\n  return value != null && typeof value.status === \"number\" && typeof value.statusText === \"string\" && typeof value.headers === \"object\" && typeof value.body !== \"undefined\";\n}\n\nfunction isRedirectResponse(result) {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isQueryRouteResponse(obj) {\n  return obj && isResponse(obj.response) && (obj.type === ResultType.data || ResultType.error);\n}\n\nfunction isValidMethod(method) {\n  return validRequestMethods.has(method);\n}\n\nfunction isMutationMethod(method) {\n  return validMutationMethods.has(method);\n}\n\nasync function resolveDeferredResults(currentMatches, matchesToLoad, results, signal, isFetcher, currentLoaderData) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    let currentMatch = currentMatches.find(m => m.route.id === match.route.id);\n    let isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, isFetcher).then(result => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(result, signal, unwrap) {\n  if (unwrap === void 0) {\n    unwrap = false;\n  }\n\n  let aborted = await result.deferredData.resolveData(signal);\n\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data\n  };\n}\n\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll(\"index\").some(v => v === \"\");\n} // Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\n\n\nfunction createUseMatchesMatch(match, loaderData) {\n  let {\n    route,\n    pathname,\n    params\n  } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle\n  };\n}\n\nfunction getTargetMatch(matches, location) {\n  let search = typeof location === \"string\" ? parsePath(location).search : location.search;\n\n  if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || \"\")) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  } // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n\n\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n} //#endregion\n\n\nexport { AbortedDeferredError, Action, ErrorResponse, IDLE_BLOCKER, IDLE_FETCHER, IDLE_NAVIGATION, UNSAFE_DEFERRED_SYMBOL, DeferredData as UNSAFE_DeferredData, convertRoutesToDataRoutes as UNSAFE_convertRoutesToDataRoutes, getPathContributingMatches as UNSAFE_getPathContributingMatches, createBrowserHistory, createHashHistory, createMemoryHistory, createPath, createRouter, createStaticHandler, defer, generatePath, getStaticContextFromError, getToPathname, invariant, isRouteErrorResponse, joinPaths, json, matchPath, matchRoutes, normalizePathname, parsePath, redirect, resolvePath, resolveTo, stripBasename, warning };","map":{"version":3,"mappings":"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","names":["Action","PopStateEventType","options","initialEntries","initialIndex","v5Compat","entries","map","entry","index","createMemoryLocation","state","undefined","clampIndex","length","action","Pop","listener","n","Math","min","max","getCurrentLocation","to","key","location","createLocation","pathname","warning","charAt","JSON","stringify","createHref","createPath","history","createURL","URL","encodeLocation","path","parsePath","search","hash","push","Push","nextLocation","splice","delta","replace","Replace","go","nextIndex","listen","fn","createBrowserLocation","window","globalHistory","usr","createBrowserHref","getUrlBasedHistory","createHashLocation","substr","createHashHref","base","document","querySelector","href","getAttribute","url","hashIndex","indexOf","slice","validateHashLocation","value","message","Error","cond","console","warn","e","createKey","random","toString","getHistoryState","idx","current","_ref","parsedPath","searchIndex","getLocation","validateLocation","defaultView","getIndex","replaceState","handlePop","historyState","pushState","error","assign","origin","invariant","addEventListener","removeEventListener","ResultType","isIndexRoute","route","convertRoutesToDataRoutes","routes","parentPath","allIds","Set","treePath","id","join","children","has","add","indexRoute","pathOrLayoutRoute","matchRoutes","locationArg","basename","stripBasename","branches","flattenRoutes","rankRouteBranches","matches","i","matchRouteBranch","safelyDecodeURI","parentsMeta","flattenRoute","relativePath","meta","caseSensitive","childrenIndex","startsWith","joinPaths","routesMeta","concat","score","computeScore","forEach","includes","exploded","explodeOptionalSegments","segments","split","first","rest","isOptional","endsWith","required","restExploded","result","subpath","sort","a","b","compareIndexes","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","initialScore","some","filter","reduce","segment","test","siblings","every","branch","matchedParams","matchedPathname","end","remainingPathname","match","matchPath","Object","params","pathnameBase","normalizePathname","generatePath","originalPath","_","optional","param","prefix","__","str","star","pattern","matcher","paramNames","compilePath","captureGroups","memo","paramName","splatValue","safelyDecodeURIComponent","regexpSource","RegExp","decodeURI","decodeURIComponent","toLowerCase","startIndex","nextChar","resolvePath","fromPathname","toPathname","resolvePathname","normalizeSearch","normalizeHash","relativeSegments","pop","getInvalidPathError","char","field","dest","getPathContributingMatches","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","isEmptyPath","from","routePathnameIndex","toSegments","shift","hasExplicitTrailingSlash","hasCurrentTrailingSlash","getToPathname","paths","json","data","init","responseInit","status","headers","Headers","set","Response","AbortedDeferredError","DeferredData","constructor","deferredKeys","Array","isArray","reject","abortPromise","Promise","r","controller","AbortController","onAbort","unlistenAbortSignal","signal","acc","trackPromise","done","pendingKeysSet","promise","race","then","onSettle","catch","defineProperty","get","aborted","delete","emit","settledKey","subscribers","subscriber","subscribe","cancel","abort","v","k","resolveData","resolve","size","unwrappedData","_ref2","unwrapTrackedPromise","pendingKeys","isTrackedPromise","_tracked","_error","_data","defer","redirect","ErrorResponse","statusText","internal","isRouteErrorResponse","validMutationMethodsArr","validMutationMethods","validRequestMethodsArr","validRequestMethods","redirectStatusCodes","redirectPreserveMethodStatusCodes","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","IDLE_FETCHER","IDLE_BLOCKER","proceed","reset","ABSOLUTE_URL_REGEX","isBrowser","createElement","isServer","createRouter","dataRoutes","unlistenHistory","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","hydrationData","initialMatches","initialErrors","getInternalRouterError","getShortCircuitMatches","initialized","m","loader","router","historyAction","navigation","restoreScrollPosition","preventScrollReset","revalidation","loaderData","actionData","errors","fetchers","Map","blockers","pendingAction","HistoryAction","pendingPreventScrollReset","pendingNavigationController","isUninterruptedRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","fetchLoadMatches","activeDeferreds","blockerFunctions","ignoreNextHistoryUpdate","initialize","blockerKey","shouldBlockNavigation","currentLocation","updateBlocker","deleteBlocker","updateState","startNavigation","dispose","clear","deleteFetcher","newState","completeNavigation","isActionReload","isMutationMethod","_isRedirect","keys","mergeLoaderData","getSavedScrollPosition","navigate","opts","submission","normalizeNavigateOptions","userReplace","pendingError","revalidate","interruptActiveLoads","startUninterruptedRevalidation","overrideNavigation","saveScrollPosition","loadingNavigation","notFoundMatches","cancelActiveDeferreds","isHashChangeOnly","request","createClientSideRequest","pendingActionData","findNearestBoundary","actionOutput","handleAction","shortCircuited","pendingActionError","Request","handleLoaders","actionMatch","getTargetMatch","type","method","routeId","callLoaderOrAction","isRedirectResult","startRedirectNavigation","isErrorResult","boundaryMatch","isDeferredResult","activeSubmission","matchesToLoad","revalidatingFetchers","getMatchesToLoad","rf","fetcher","revalidatingFetcher","results","loaderResults","fetcherResults","callLoadersAndMaybeResolveData","findRedirect","processLoaderData","deferredData","markFetchRedirectsDone","didAbortFetchLoads","abortStaleFetchLoads","getFetcher","fetch","abortFetcher","setFetcherError","handleFetcherAction","handleFetcherLoader","requestMatches","existingFetcher","abortController","fetchRequest","actionResult","loadingFetcher","isFetchActionRedirect","revalidationRequest","loadId","loadFetcher","staleKey","doneFetcher","resolveDeferredData","_temp","redirectLocation","_extends","_isFetchActionRedirect","_window","newOrigin","redirectHistoryAction","currentMatches","fetchersToLoad","all","f","resolveDeferredResults","markFetchersDone","doneKeys","landedId","yeetedKeys","getBlocker","blocker","newBlocker","blockerFunction","predicate","cancelledRouteIds","dfd","enableScrollRestoration","positions","getPosition","getKey","y","userMatches","createUseMatchesMatch","_internalFetchControllers","_internalActiveDeferreds","UNSAFE_DEFERRED_SYMBOL","Symbol","query","_temp2","requestContext","isValidMethod","methodNotAllowedMatches","statusCode","loaderHeaders","actionHeaders","queryImpl","isResponse","queryRoute","_temp3","find","values","routeMatch","submit","loadRouteData","isQueryRouteResponse","isRedirectResponse","response","isRouteRequest","Location","context","loaderRequest","getLoaderMatchesUntilBoundary","processRouteLoaderData","executedLoaders","fromEntries","getStaticContextFromError","newContext","_deepestRenderedBoundaryId","isSubmissionNavigation","isFetcher","stripHashFromPath","searchParams","convertFormDataToSearchParams","hasNakedIndexQuery","append","boundaryId","boundaryMatches","findIndex","currentUrl","nextUrl","defaultShouldRevalidate","navigationMatches","isNewLoader","currentRouteMatch","nextRouteMatch","shouldRevalidateLoader","currentParams","nextParams","isNewRouteInstance","shouldRevalidate","currentLoaderData","currentMatch","isNew","isMissingData","currentPath","loaderMatch","arg","routeChoice","isStaticRequest","resultType","onReject","handler","activeMatches","resolvedLocation","protocol","contentType","text","deferred","toUpperCase","body","URLSearchParams","File","name","foundError","newLoaderData","mergedLoaderData","hasOwnProperty","eligibleMatches","reverse","hasErrorBoundary","_temp4","errorMessage","obj","isRevalidatingLoader","unwrap","getAll","handle","pathMatches"],"sources":["/Users/marinachuhlib/Desktop/GitHub/redux-toolkit-practice/node_modules/@remix-run/router/history.ts","/Users/marinachuhlib/Desktop/GitHub/redux-toolkit-practice/node_modules/@remix-run/router/utils.ts","/Users/marinachuhlib/Desktop/GitHub/redux-toolkit-practice/node_modules/@remix-run/router/router.ts"],"sourcesContent":["////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexport enum Action {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Pop = \"POP\",\n\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Push = \"PUSH\",\n\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Replace = \"REPLACE\",\n}\n\n/**\n * The pathname, search, and hash values of a URL.\n */\nexport interface Path {\n  /**\n   * A URL pathname, beginning with a /.\n   */\n  pathname: string;\n\n  /**\n   * A URL search string, beginning with a ?.\n   */\n  search: string;\n\n  /**\n   * A URL fragment identifier, beginning with a #.\n   */\n  hash: string;\n}\n\n/**\n * An entry in a history stack. A location contains information about the\n * URL path, as well as possibly some arbitrary state and a key.\n */\nexport interface Location extends Path {\n  /**\n   * A value of arbitrary data associated with this location.\n   */\n  state: any;\n\n  /**\n   * A unique string associated with this location. May be used to safely store\n   * and retrieve data in some other storage API, like `localStorage`.\n   *\n   * Note: This value is always \"default\" on the initial location.\n   */\n  key: string;\n}\n\n/**\n * A change to the current location.\n */\nexport interface Update {\n  /**\n   * The action that triggered the change.\n   */\n  action: Action;\n\n  /**\n   * The new location.\n   */\n  location: Location;\n\n  /**\n   * The delta between this location and the former location in the history stack\n   */\n  delta: number | null;\n}\n\n/**\n * A function that receives notifications about location changes.\n */\nexport interface Listener {\n  (update: Update): void;\n}\n\n/**\n * Describes a location that is the destination of some navigation, either via\n * `history.push` or `history.replace`. May be either a URL or the pieces of a\n * URL path.\n */\nexport type To = string | Partial<Path>;\n\n/**\n * A history is an interface to the navigation stack. The history serves as the\n * source of truth for the current location, as well as provides a set of\n * methods that may be used to change it.\n *\n * It is similar to the DOM's `window.history` object, but with a smaller, more\n * focused API.\n */\nexport interface History {\n  /**\n   * The last action that modified the current location. This will always be\n   * Action.Pop when a history instance is first created. This value is mutable.\n   */\n  readonly action: Action;\n\n  /**\n   * The current location. This value is mutable.\n   */\n  readonly location: Location;\n\n  /**\n   * Returns a valid href for the given `to` value that may be used as\n   * the value of an <a href> attribute.\n   *\n   * @param to - The destination URL\n   */\n  createHref(to: To): string;\n\n  /**\n   * Returns a URL for the given `to` value\n   *\n   * @param to - The destination URL\n   */\n  createURL(to: To): URL;\n\n  /**\n   * Encode a location the same way window.history would do (no-op for memory\n   * history) so we ensure our PUSH/REPLACE navigations for data routers\n   * behave the same as POP\n   *\n   * @param to Unencoded path\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * Pushes a new location onto the history stack, increasing its length by one.\n   * If there were any entries in the stack after the current one, they are\n   * lost.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  push(to: To, state?: any): void;\n\n  /**\n   * Replaces the current location in the history stack with a new one.  The\n   * location that was replaced will no longer be available.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  replace(to: To, state?: any): void;\n\n  /**\n   * Navigates `n` entries backward/forward in the history stack relative to the\n   * current index. For example, a \"back\" navigation would use go(-1).\n   *\n   * @param delta - The delta in the stack index\n   */\n  go(delta: number): void;\n\n  /**\n   * Sets up a listener that will be called whenever the current location\n   * changes.\n   *\n   * @param listener - A function that will be called when the location changes\n   * @returns unlisten - A function that may be used to stop listening\n   */\n  listen(listener: Listener): () => void;\n}\n\ntype HistoryState = {\n  usr: any;\n  key?: string;\n  idx: number;\n};\n\nconst PopStateEventType = \"popstate\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\nexport type InitialEntry = string | Partial<Location>;\n\nexport type MemoryHistoryOptions = {\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  v5Compat?: boolean;\n};\n\n/**\n * A memory history stores locations in memory. This is useful in stateful\n * environments where there is no web browser, such as node tests or React\n * Native.\n */\nexport interface MemoryHistory extends History {\n  /**\n   * The current index in the history stack.\n   */\n  readonly index: number;\n}\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nexport function createMemoryHistory(\n  options: MemoryHistoryOptions = {}\n): MemoryHistory {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries: Location[]; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) =>\n    createMemoryLocation(\n      entry,\n      typeof entry === \"string\" ? null : entry.state,\n      index === 0 ? \"default\" : undefined\n    )\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function clampIndex(n: number): number {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation(): Location {\n    return entries[index];\n  }\n  function createMemoryLocation(\n    to: To,\n    state: any = null,\n    key?: string\n  ): Location {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n\n  function createHref(to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  let history: MemoryHistory = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to: To) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\",\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 1 });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 0 });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({ action, location: nextLocation, delta });\n      }\n    },\n    listen(fn: Listener) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    },\n  };\n\n  return history;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\nexport interface BrowserHistory extends UrlHistory {}\n\nexport type BrowserHistoryOptions = UrlHistoryOptions;\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nexport function createBrowserHistory(\n  options: BrowserHistoryOptions = {}\n): BrowserHistory {\n  function createBrowserLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let { pathname, search, hash } = window.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createBrowserHref(window: Window, to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\nexport interface HashHistory extends UrlHistory {}\n\nexport type HashHistoryOptions = UrlHistoryOptions;\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nexport function createHashHistory(\n  options: HashHistoryOptions = {}\n): HashHistory {\n  function createHashLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\",\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createHashHref(window: Window, to: To) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location: Location, to: To) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @private\n */\nexport function invariant(value: boolean, message?: string): asserts value;\nexport function invariant<T>(\n  value: T | null | undefined,\n  message?: string\n): asserts value is T;\nexport function invariant(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nfunction warning(cond: any, message: string) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location: Location, index: number): HistoryState {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index,\n  };\n}\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nexport function createLocation(\n  current: string | Location,\n  to: To,\n  state: any = null,\n  key?: string\n): Readonly<Location> {\n  let location: Readonly<Location> = {\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...(typeof to === \"string\" ? parsePath(to) : to),\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to && (to as Location).key) || key || createKey(),\n  };\n  return location;\n}\n\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nexport function createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\",\n}: Partial<Path>) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nexport function parsePath(path: string): Partial<Path> {\n  let parsedPath: Partial<Path> = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nexport interface UrlHistory extends History {}\n\nexport type UrlHistoryOptions = {\n  window?: Window;\n  v5Compat?: boolean;\n};\n\nfunction getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window[\"history\"]) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Location, to: To) => void) | null,\n  options: UrlHistoryOptions = {}\n): UrlHistory {\n  let { window = document.defaultView!, v5Compat = false } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  let index = getIndex()!;\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState({ ...globalHistory.state, idx: index }, \"\");\n  }\n\n  function getIndex(): number {\n    let state = globalHistory.state || { idx: null };\n    return state.idx;\n  }\n\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({ action, location: history.location, delta });\n    }\n  }\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 1 });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 0 });\n    }\n  }\n\n  function createURL(to: To): URL {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base =\n      window.location.origin !== \"null\"\n        ? window.location.origin\n        : window.location.href;\n\n    let href = typeof to === \"string\" ? to : createPath(to);\n    invariant(\n      base,\n      `No window.location.(origin|href) available to create URL for href: ${href}`\n    );\n    return new URL(href, base);\n  }\n\n  let history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn: Listener) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash,\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n  };\n\n  return history;\n}\n\n//#endregion\n","import type { Location, Path, To } from \"./history\";\nimport { invariant, parsePath } from \"./history\";\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\nexport interface RouteData {\n  [routeId: string]: any;\n}\n\nexport enum ResultType {\n  data = \"data\",\n  deferred = \"deferred\",\n  redirect = \"redirect\",\n  error = \"error\",\n}\n\n/**\n * Successful result from a loader or action\n */\nexport interface SuccessResult {\n  type: ResultType.data;\n  data: any;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Successful defer() result from a loader or action\n */\nexport interface DeferredResult {\n  type: ResultType.deferred;\n  deferredData: DeferredData;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Redirect result from a loader or action\n */\nexport interface RedirectResult {\n  type: ResultType.redirect;\n  status: number;\n  location: string;\n  revalidate: boolean;\n}\n\n/**\n * Unsuccessful result from a loader or action\n */\nexport interface ErrorResult {\n  type: ResultType.error;\n  error: any;\n  headers?: Headers;\n}\n\n/**\n * Result from a loader or action - potentially successful or unsuccessful\n */\nexport type DataResult =\n  | SuccessResult\n  | DeferredResult\n  | RedirectResult\n  | ErrorResult;\n\nexport type MutationFormMethod = \"post\" | \"put\" | \"patch\" | \"delete\";\nexport type FormMethod = \"get\" | MutationFormMethod;\n\nexport type FormEncType =\n  | \"application/x-www-form-urlencoded\"\n  | \"multipart/form-data\";\n\n/**\n * @private\n * Internal interface to pass around for action submissions, not intended for\n * external consumption\n */\nexport interface Submission {\n  formMethod: FormMethod;\n  formAction: string;\n  formEncType: FormEncType;\n  formData: FormData;\n}\n\n/**\n * @private\n * Arguments passed to route loader/action functions.  Same for now but we keep\n * this as a private implementation detail in case they diverge in the future.\n */\ninterface DataFunctionArgs {\n  request: Request;\n  params: Params;\n  context?: any;\n}\n\n/**\n * Arguments passed to loader functions\n */\nexport interface LoaderFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Arguments passed to action functions\n */\nexport interface ActionFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Route loader function signature\n */\nexport interface LoaderFunction {\n  (args: LoaderFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route action function signature\n */\nexport interface ActionFunction {\n  (args: ActionFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route shouldRevalidate function signature.  This runs after any submission\n * (navigation or fetcher), so we flatten the navigation/fetcher submission\n * onto the arguments.  It shouldn't matter whether it came from a navigation\n * or a fetcher, what really matters is the URLs and the formData since loaders\n * have to re-run based on the data models that were potentially mutated.\n */\nexport interface ShouldRevalidateFunction {\n  (args: {\n    currentUrl: URL;\n    currentParams: AgnosticDataRouteMatch[\"params\"];\n    nextUrl: URL;\n    nextParams: AgnosticDataRouteMatch[\"params\"];\n    formMethod?: Submission[\"formMethod\"];\n    formAction?: Submission[\"formAction\"];\n    formEncType?: Submission[\"formEncType\"];\n    formData?: Submission[\"formData\"];\n    actionResult?: DataResult;\n    defaultShouldRevalidate: boolean;\n  }): boolean;\n}\n\n/**\n * Base RouteObject with common props shared by all types of routes\n */\ntype AgnosticBaseRouteObject = {\n  caseSensitive?: boolean;\n  path?: string;\n  id?: string;\n  loader?: LoaderFunction;\n  action?: ActionFunction;\n  hasErrorBoundary?: boolean;\n  shouldRevalidate?: ShouldRevalidateFunction;\n  handle?: any;\n};\n\n/**\n * Index routes must not have children\n */\nexport type AgnosticIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: undefined;\n  index: true;\n};\n\n/**\n * Non-index routes may have children, but cannot have index\n */\nexport type AgnosticNonIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: AgnosticRouteObject[];\n  index?: false;\n};\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport type AgnosticRouteObject =\n  | AgnosticIndexRouteObject\n  | AgnosticNonIndexRouteObject;\n\nexport type AgnosticDataIndexRouteObject = AgnosticIndexRouteObject & {\n  id: string;\n};\n\nexport type AgnosticDataNonIndexRouteObject = AgnosticNonIndexRouteObject & {\n  children?: AgnosticDataRouteObject[];\n  id: string;\n};\n\n/**\n * A data route object, which is just a RouteObject with a required unique ID\n */\nexport type AgnosticDataRouteObject =\n  | AgnosticDataIndexRouteObject\n  | AgnosticDataNonIndexRouteObject;\n\n// Recursive helper for finding path parameters in the absence of wildcards\ntype _PathParam<Path extends string> =\n  // split path into individual path segments\n  Path extends `${infer L}/${infer R}`\n    ? _PathParam<L> | _PathParam<R>\n    : // find params after `:`\n    Path extends `:${infer Param}`\n    ? Param extends `${infer Optional}?`\n      ? Optional\n      : Param\n    : // otherwise, there aren't any params present\n      never;\n\n/**\n * Examples:\n * \"/a/b/*\" -> \"*\"\n * \":a\" -> \"a\"\n * \"/a/:b\" -> \"b\"\n * \"/a/blahblahblah:b\" -> \"b\"\n * \"/:a/:b\" -> \"a\" | \"b\"\n * \"/:a/b/:c/*\" -> \"a\" | \"c\" | \"*\"\n */\ntype PathParam<Path extends string> =\n  // check if path is just a wildcard\n  Path extends \"*\"\n    ? \"*\"\n    : // look for wildcard at the end of the path\n    Path extends `${infer Rest}/*`\n    ? \"*\" | _PathParam<Rest>\n    : // look for params in the absence of wildcards\n      _PathParam<Path>;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  // if could not find path params, fallback to `string`\n  [PathParam<Segment>] extends [never] ? string : PathParam<Segment>;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface AgnosticRouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObjectType;\n}\n\nexport interface AgnosticDataRouteMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {}\n\nfunction isIndexRoute(\n  route: AgnosticRouteObject\n): route is AgnosticIndexRouteObject {\n  return route.index === true;\n}\n\n// Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\nexport function convertRoutesToDataRoutes(\n  routes: AgnosticRouteObject[],\n  parentPath: number[] = [],\n  allIds: Set<string> = new Set<string>()\n): AgnosticDataRouteObject[] {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      route.index !== true || !route.children,\n      `Cannot specify children on an index route`\n    );\n    invariant(\n      !allIds.has(id),\n      `Found a route id collision on id \"${id}\".  Route ` +\n        \"id's must be globally unique within Data Router usages\"\n    );\n    allIds.add(id);\n\n    if (isIndexRoute(route)) {\n      let indexRoute: AgnosticDataIndexRouteObject = { ...route, id };\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute: AgnosticDataNonIndexRouteObject = {\n        ...route,\n        id,\n        children: route.children\n          ? convertRoutesToDataRoutes(route.children, treePath, allIds)\n          : undefined,\n      };\n      return pathOrLayoutRoute;\n    }\n  });\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nexport function matchRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch<string, RouteObjectType>(\n      branches[i],\n      // Incoming pathnames are generally encoded from either window.location\n      // or from router.navigate, but we want to match against the unencoded\n      // paths in the route definitions.  Memory router locations won't be\n      // encoded here but there also shouldn't be anything to decode so this\n      // should be a safe operation.  This avoids needing matchRoutes to be\n      // history-aware.\n      safelyDecodeURI(pathname)\n    );\n  }\n\n  return matches;\n}\n\ninterface RouteMeta<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObjectType;\n}\n\ninterface RouteBranch<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta<RouteObjectType>[];\n}\n\nfunction flattenRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  branches: RouteBranch<RouteObjectType>[] = [],\n  parentsMeta: RouteMeta<RouteObjectType>[] = [],\n  parentPath = \"\"\n): RouteBranch<RouteObjectType>[] {\n  let flattenRoute = (\n    route: RouteObjectType,\n    index: number,\n    relativePath?: string\n  ) => {\n    let meta: RouteMeta<RouteObjectType> = {\n      relativePath:\n        relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        // Our types know better, but runtime JS may not!\n        // @ts-expect-error\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta,\n    });\n  };\n  routes.forEach((route, index) => {\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !route.path?.includes(\"?\")) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n\n  return branches;\n}\n\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path: string): string[] {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n\n  let [first, ...rest] = segments;\n\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n\n  let result: string[] = [];\n\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explodes _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(\n    ...restExploded.map((subpath) =>\n      subpath === \"\" ? required : [required, subpath].join(\"/\")\n    )\n  );\n\n  // Then if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map((exploded) =>\n    path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded\n  );\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  branch: RouteBranch<RouteObjectType>,\n  pathname: string\n): AgnosticRouteMatch<ParamKey, RouteObjectType>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: AgnosticRouteMatch<ParamKey, RouteObjectType>[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    if (!match) return null;\n\n    Object.assign(matchedParams, match.params);\n\n    let route = meta.route;\n\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams as Params<ParamKey>,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nexport function generatePath<Path extends string>(\n  originalPath: Path,\n  params: {\n    [key in PathParam<Path>]: string | null;\n  } = {} as any\n): string {\n  let path = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(\n      false,\n      `Route path \"${path}\" will be treated as if it were ` +\n        `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n        `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n        `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n    );\n    path = path.replace(/\\*$/, \"/*\") as Path;\n  }\n\n  return (\n    path\n      .replace(\n        /^:(\\w+)(\\??)/g,\n        (_, key: PathParam<Path>, optional: string | undefined) => {\n          let param = params[key];\n          if (optional === \"?\") {\n            return param == null ? \"\" : param;\n          }\n          if (param == null) {\n            invariant(false, `Missing \":${key}\" param`);\n          }\n          return param;\n        }\n      )\n      .replace(\n        /\\/:(\\w+)(\\??)/g,\n        (_, key: PathParam<Path>, optional: string | undefined) => {\n          let param = params[key];\n          if (optional === \"?\") {\n            return param == null ? \"\" : `/${param}`;\n          }\n          if (param == null) {\n            invariant(false, `Missing \":${key}\" param`);\n          }\n          return `/${param}`;\n        }\n      )\n      // Remove any optional markers from optional static segments\n      .replace(/\\?/g, \"\")\n      .replace(/(\\/?)\\*/, (_, prefix, __, str) => {\n        const star = \"*\" as PathParam<Path>;\n\n        if (params[star] == null) {\n          // If no splat was provided, trim the trailing slash _unless_ it's\n          // the entire path\n          return str === \"/*\" ? \"/\" : \"\";\n        }\n\n        // Apply the splat\n        return `${prefix}${params[star]}`;\n      })\n  );\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, paramNames] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = paramNames.reduce<Mutable<Params>>(\n    (memo, paramName, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      memo[paramName] = safelyDecodeURIComponent(\n        captureGroups[index] || \"\",\n        paramName\n      );\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, string[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let paramNames: string[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(/\\/:(\\w+)/g, (_: string, paramName: string) => {\n        paramNames.push(paramName);\n        return \"/([^\\\\/]+)\";\n      });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else {\n    // Nothing to match for \"\" or \"/\"\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURI(value: string) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(\n      false,\n      `The URL path \"${value}\" could not be decoded because it is is a ` +\n        `malformed URL segment. This is probably due to a bad percent ` +\n        `encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\nfunction safelyDecodeURIComponent(value: string, paramName: string) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(\n      false,\n      `The value for the URL param \"${paramName}\" will not be decoded because` +\n        ` the string \"${value}\" is a malformed URL segment. This is probably` +\n        ` due to a bad percent encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * @private\n */\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\")\n    ? basename.length - 1\n    : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\n/**\n * @private\n */\nexport function warning(cond: any, message: string): void {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging @remix-run/router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(\n  char: string,\n  field: string,\n  dest: string,\n  path: Partial<Path>\n) {\n  return (\n    `Cannot include a '${char}' character in a manually specified ` +\n    `\\`to.${field}\\` field [${JSON.stringify(\n      path\n    )}].  Please separate it out to the ` +\n    `\\`to.${dest}\\` field. Alternatively you may provide the full path as ` +\n    `a string in <Link to=\"...\"> and the router will parse it for you.`\n  );\n}\n\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nexport function getPathContributingMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[]) {\n  return matches.filter(\n    (match, index) =>\n      index === 0 || (match.route.path && match.route.path.length > 0)\n  );\n}\n\n/**\n * @private\n */\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string,\n  isPathRelative = false\n): Path {\n  let to: Partial<Path>;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = { ...toArg };\n\n    invariant(\n      !to.pathname || !to.pathname.includes(\"?\"),\n      getInvalidPathError(\"?\", \"pathname\", \"search\", to)\n    );\n    invariant(\n      !to.pathname || !to.pathname.includes(\"#\"),\n      getInvalidPathError(\"#\", \"pathname\", \"hash\", to)\n    );\n    invariant(\n      !to.search || !to.search.includes(\"#\"),\n      getInvalidPathError(\"#\", \"search\", \"hash\", to)\n    );\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n\n  let from: string;\n\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash =\n    toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash =\n    (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (\n    !path.pathname.endsWith(\"/\") &&\n    (hasExplicitTrailingSlash || hasCurrentTrailingSlash)\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\n/**\n * @private\n */\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\n/**\n * @private\n */\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\n/**\n * @private\n */\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\n/**\n * @private\n */\nexport const normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\n/**\n * @private\n */\nexport const normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\nexport type JsonFunction = <Data>(\n  data: Data,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nexport const json: JsonFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers,\n  });\n};\n\nexport interface TrackedPromise extends Promise<any> {\n  _tracked?: boolean;\n  _data?: any;\n  _error?: any;\n}\n\nexport class AbortedDeferredError extends Error {}\n\nexport class DeferredData {\n  private pendingKeysSet: Set<string> = new Set<string>();\n  private controller: AbortController;\n  private abortPromise: Promise<void>;\n  private unlistenAbortSignal: () => void;\n  private subscribers: Set<(aborted: boolean, settledKey?: string) => void> =\n    new Set();\n  data: Record<string, unknown>;\n  init?: ResponseInit;\n  deferredKeys: string[] = [];\n\n  constructor(data: Record<string, unknown>, responseInit?: ResponseInit) {\n    invariant(\n      data && typeof data === \"object\" && !Array.isArray(data),\n      \"defer() only accepts plain objects\"\n    );\n\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject: (e: AbortedDeferredError) => void;\n    this.abortPromise = new Promise((_, r) => (reject = r));\n    this.controller = new AbortController();\n    let onAbort = () =>\n      reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () =>\n      this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n\n    this.data = Object.entries(data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: this.trackPromise(key, value),\n        }),\n      {}\n    );\n\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n\n    this.init = responseInit;\n  }\n\n  private trackPromise(\n    key: string,\n    value: Promise<unknown> | unknown\n  ): TrackedPromise | unknown {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key);\n\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise: TrackedPromise = Promise.race([value, this.abortPromise]).then(\n      (data) => this.onSettle(promise, key, null, data as unknown),\n      (error) => this.onSettle(promise, key, error as unknown)\n    );\n\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n\n    Object.defineProperty(promise, \"_tracked\", { get: () => true });\n    return promise;\n  }\n\n  private onSettle(\n    promise: TrackedPromise,\n    key: string,\n    error: unknown,\n    data?: unknown\n  ): unknown {\n    if (\n      this.controller.signal.aborted &&\n      error instanceof AbortedDeferredError\n    ) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeysSet.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    if (error) {\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", { get: () => data });\n    this.emit(false, key);\n    return data;\n  }\n\n  private emit(aborted: boolean, settledKey?: string) {\n    this.subscribers.forEach((subscriber) => subscriber(aborted, settledKey));\n  }\n\n  subscribe(fn: (aborted: boolean, settledKey?: string) => void) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n\n  async resolveData(signal: AbortSignal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise((resolve) => {\n        this.subscribe((aborted) => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(\n      this.data !== null && this.done,\n      \"Can only unwrap data on initialized and settled deferreds\"\n    );\n\n    return Object.entries(this.data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: unwrapTrackedPromise(value),\n        }),\n      {}\n    );\n  }\n\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\n\nfunction isTrackedPromise(value: any): value is TrackedPromise {\n  return (\n    value instanceof Promise && (value as TrackedPromise)._tracked === true\n  );\n}\n\nfunction unwrapTrackedPromise(value: any) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\n\nexport type DeferFunction = (\n  data: Record<string, unknown>,\n  init?: number | ResponseInit\n) => DeferredData;\n\nexport const defer: DeferFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  return new DeferredData(data, responseInit);\n};\n\nexport type RedirectFunction = (\n  url: string,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirect: RedirectFunction = (url, init = 302) => {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n\n  return new Response(null, {\n    ...responseInit,\n    headers,\n  });\n};\n\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\nexport class ErrorResponse {\n  status: number;\n  statusText: string;\n  data: any;\n  error?: Error;\n  internal: boolean;\n\n  constructor(\n    status: number,\n    statusText: string | undefined,\n    data: any,\n    internal = false\n  ) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nexport function isRouteErrorResponse(error: any): error is ErrorResponse {\n  return (\n    error != null &&\n    typeof error.status === \"number\" &&\n    typeof error.statusText === \"string\" &&\n    typeof error.internal === \"boolean\" &&\n    \"data\" in error\n  );\n}\n","import type { History, Location, Path, To } from \"./history\";\nimport {\n  Action as HistoryAction,\n  createLocation,\n  createPath,\n  invariant,\n  parsePath,\n} from \"./history\";\nimport type {\n  DataResult,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteObject,\n  DeferredResult,\n  ErrorResult,\n  FormEncType,\n  FormMethod,\n  RedirectResult,\n  RouteData,\n  AgnosticRouteObject,\n  Submission,\n  SuccessResult,\n  AgnosticRouteMatch,\n  MutationFormMethod,\n  ShouldRevalidateFunction,\n} from \"./utils\";\nimport {\n  DeferredData,\n  ErrorResponse,\n  ResultType,\n  convertRoutesToDataRoutes,\n  getPathContributingMatches,\n  isRouteErrorResponse,\n  joinPaths,\n  matchRoutes,\n  resolveTo,\n  warning,\n} from \"./utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\nexport interface Router {\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the basename for the router\n   */\n  get basename(): RouterInit[\"basename\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the current state of the router\n   */\n  get state(): RouterState;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the routes for this router instance\n   */\n  get routes(): AgnosticDataRouteObject[];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Initialize the router, including adding history listeners and kicking off\n   * initial data fetches.  Returns a function to cleanup listeners and abort\n   * any in-progress loads\n   */\n  initialize(): Router;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Subscribe to router.state updates\n   *\n   * @param fn function to call with the new state\n   */\n  subscribe(fn: RouterSubscriber): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Enable scroll restoration behavior in the router\n   *\n   * @param savedScrollPositions Object that will manage positions, in case\n   *                             it's being restored from sessionStorage\n   * @param getScrollPosition    Function to get the active Y scroll position\n   * @param getKey               Function to get the key to use for restoration\n   */\n  enableScrollRestoration(\n    savedScrollPositions: Record<string, number>,\n    getScrollPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Navigate forward/backward in the history stack\n   * @param to Delta to move in the history stack\n   */\n  navigate(to: number): Promise<void>;\n\n  /**\n   * Navigate to the given path\n   * @param to Path to navigate to\n   * @param opts Navigation options (method, submission, etc.)\n   */\n  navigate(to: To, opts?: RouterNavigateOptions): Promise<void>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a fetcher load/submission\n   *\n   * @param key     Fetcher key\n   * @param routeId Route that owns the fetcher\n   * @param href    href to fetch\n   * @param opts    Fetcher options, (method, submission, etc.)\n   */\n  fetch(\n    key: string,\n    routeId: string,\n    href: string,\n    opts?: RouterNavigateOptions\n  ): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a revalidation of all current route loaders and fetcher loads\n   */\n  revalidate(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to create an href for the given location\n   * @param location\n   */\n  createHref(location: Location | URL): string;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to URL encode a destination path according to the internal\n   * history implementation\n   * @param to\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get/create a fetcher for the given key\n   * @param key\n   */\n  getFetcher<TData = any>(key?: string): Fetcher<TData>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete the fetcher for a given key\n   * @param key\n   */\n  deleteFetcher(key?: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Cleanup listeners and abort any in-progress loads\n   */\n  dispose(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get a navigation blocker\n   * @param key The identifier for the blocker\n   * @param fn The blocker function implementation\n   */\n  getBlocker(key: string, fn: BlockerFunction): Blocker;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete a navigation blocker\n   * @param key The identifier for the blocker\n   */\n  deleteBlocker(key: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal fetch AbortControllers accessed by unit tests\n   */\n  _internalFetchControllers: Map<string, AbortController>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal pending DeferredData instances accessed by unit tests\n   */\n  _internalActiveDeferreds: Map<string, DeferredData>;\n}\n\n/**\n * State maintained internally by the router.  During a navigation, all states\n * reflect the the \"old\" location unless otherwise noted.\n */\nexport interface RouterState {\n  /**\n   * The action of the most recent navigation\n   */\n  historyAction: HistoryAction;\n\n  /**\n   * The current location reflected by the router\n   */\n  location: Location;\n\n  /**\n   * The current set of route matches\n   */\n  matches: AgnosticDataRouteMatch[];\n\n  /**\n   * Tracks whether we've completed our initial data load\n   */\n  initialized: boolean;\n\n  /**\n   * Current scroll position we should start at for a new view\n   *  - number -> scroll position to restore to\n   *  - false -> do not restore scroll at all (used during submissions)\n   *  - null -> don't have a saved position, scroll to hash or top of page\n   */\n  restoreScrollPosition: number | false | null;\n\n  /**\n   * Indicate whether this navigation should skip resetting the scroll position\n   * if we are unable to restore the scroll position\n   */\n  preventScrollReset: boolean;\n\n  /**\n   * Tracks the state of the current navigation\n   */\n  navigation: Navigation;\n\n  /**\n   * Tracks any in-progress revalidations\n   */\n  revalidation: RevalidationState;\n\n  /**\n   * Data from the loaders for the current matches\n   */\n  loaderData: RouteData;\n\n  /**\n   * Data from the action for the current matches\n   */\n  actionData: RouteData | null;\n\n  /**\n   * Errors caught from loaders for the current matches\n   */\n  errors: RouteData | null;\n\n  /**\n   * Map of current fetchers\n   */\n  fetchers: Map<string, Fetcher>;\n\n  /**\n   * Map of current blockers\n   */\n  blockers: Map<string, Blocker>;\n}\n\n/**\n * Data that can be passed into hydrate a Router from SSR\n */\nexport type HydrationState = Partial<\n  Pick<RouterState, \"loaderData\" | \"actionData\" | \"errors\">\n>;\n\n/**\n * Initialization options for createRouter\n */\nexport interface RouterInit {\n  basename?: string;\n  routes: AgnosticRouteObject[];\n  history: History;\n  hydrationData?: HydrationState;\n}\n\n/**\n * State returned from a server-side query() call\n */\nexport interface StaticHandlerContext {\n  basename: Router[\"basename\"];\n  location: RouterState[\"location\"];\n  matches: RouterState[\"matches\"];\n  loaderData: RouterState[\"loaderData\"];\n  actionData: RouterState[\"actionData\"];\n  errors: RouterState[\"errors\"];\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n  actionHeaders: Record<string, Headers>;\n  activeDeferreds: Record<string, DeferredData> | null;\n  _deepestRenderedBoundaryId?: string | null;\n}\n\n/**\n * A StaticHandler instance manages a singular SSR navigation/fetch event\n */\nexport interface StaticHandler {\n  dataRoutes: AgnosticDataRouteObject[];\n  query(\n    request: Request,\n    opts?: { requestContext?: unknown }\n  ): Promise<StaticHandlerContext | Response>;\n  queryRoute(\n    request: Request,\n    opts?: { routeId?: string; requestContext?: unknown }\n  ): Promise<any>;\n}\n\n/**\n * Subscriber function signature for changes to router state\n */\nexport interface RouterSubscriber {\n  (state: RouterState): void;\n}\n\ninterface UseMatchesMatch {\n  id: string;\n  pathname: string;\n  params: AgnosticRouteMatch[\"params\"];\n  data: unknown;\n  handle: unknown;\n}\n\n/**\n * Function signature for determining the key to be used in scroll restoration\n * for a given location\n */\nexport interface GetScrollRestorationKeyFunction {\n  (location: Location, matches: UseMatchesMatch[]): string | null;\n}\n\n/**\n * Function signature for determining the current scroll position\n */\nexport interface GetScrollPositionFunction {\n  (): number;\n}\n\n/**\n * Options for a navigate() call for a Link navigation\n */\ntype LinkNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n};\n\n/**\n * Options for a navigate() call for a Form navigation\n */\ntype SubmissionNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n  formMethod?: FormMethod;\n  formEncType?: FormEncType;\n  formData: FormData;\n};\n\n/**\n * Options to pass to navigate() for either a Link or Form navigation\n */\nexport type RouterNavigateOptions =\n  | LinkNavigateOptions\n  | SubmissionNavigateOptions;\n\n/**\n * Options to pass to fetch()\n */\nexport type RouterFetchOptions =\n  | Omit<LinkNavigateOptions, \"replace\">\n  | Omit<SubmissionNavigateOptions, \"replace\">;\n\n/**\n * Potential states for state.navigation\n */\nexport type NavigationStates = {\n  Idle: {\n    state: \"idle\";\n    location: undefined;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    location: Location;\n    formMethod: FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    location: Location;\n    formMethod: FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n  };\n};\n\nexport type Navigation = NavigationStates[keyof NavigationStates];\n\nexport type RevalidationState = \"idle\" | \"loading\";\n\n/**\n * Potential states for fetchers\n */\ntype FetcherStates<TData = any> = {\n  Idle: {\n    state: \"idle\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    data: TData | undefined;\n    \" _hasFetcherDoneAnything \"?: boolean;\n  };\n  Loading: {\n    state: \"loading\";\n    formMethod: FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n    data: TData | undefined;\n    \" _hasFetcherDoneAnything \"?: boolean;\n  };\n  Submitting: {\n    state: \"submitting\";\n    formMethod: FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n    data: TData | undefined;\n    \" _hasFetcherDoneAnything \"?: boolean;\n  };\n};\n\nexport type Fetcher<TData = any> =\n  FetcherStates<TData>[keyof FetcherStates<TData>];\n\ninterface BlockerBlocked {\n  state: \"blocked\";\n  reset(): void;\n  proceed(): void;\n  location: Location;\n}\n\ninterface BlockerUnblocked {\n  state: \"unblocked\";\n  reset: undefined;\n  proceed: undefined;\n  location: undefined;\n}\n\ninterface BlockerProceeding {\n  state: \"proceeding\";\n  reset: undefined;\n  proceed: undefined;\n  location: Location;\n}\n\nexport type Blocker = BlockerUnblocked | BlockerBlocked | BlockerProceeding;\n\nexport type BlockerFunction = (args: {\n  currentLocation: Location;\n  nextLocation: Location;\n  historyAction: HistoryAction;\n}) => boolean;\n\ninterface ShortCircuitable {\n  /**\n   * startNavigation does not need to complete the navigation because we\n   * redirected or got interrupted\n   */\n  shortCircuited?: boolean;\n}\n\ninterface HandleActionResult extends ShortCircuitable {\n  /**\n   * Error thrown from the current action, keyed by the route containing the\n   * error boundary to render the error.  To be committed to the state after\n   * loaders have completed\n   */\n  pendingActionError?: RouteData;\n  /**\n   * Data returned from the current action, keyed by the route owning the action.\n   * To be committed to the state after loaders have completed\n   */\n  pendingActionData?: RouteData;\n}\n\ninterface HandleLoadersResult extends ShortCircuitable {\n  /**\n   * loaderData returned from the current set of loaders\n   */\n  loaderData?: RouterState[\"loaderData\"];\n  /**\n   * errors thrown from the current set of loaders\n   */\n  errors?: RouterState[\"errors\"];\n}\n\n/**\n * Cached info for active fetcher.load() instances so they can participate\n * in revalidation\n */\ninterface FetchLoadMatch {\n  routeId: string;\n  path: string;\n  match: AgnosticDataRouteMatch;\n  matches: AgnosticDataRouteMatch[];\n}\n\n/**\n * Identified fetcher.load() calls that need to be revalidated\n */\ninterface RevalidatingFetcher extends FetchLoadMatch {\n  key: string;\n}\n\n/**\n * Wrapper object to allow us to throw any response out from callLoaderOrAction\n * for queryRouter while preserving whether or not it was thrown or returned\n * from the loader/action\n */\ninterface QueryRouteResponse {\n  type: ResultType.data | ResultType.error;\n  response: Response;\n}\n\nconst validMutationMethodsArr: MutationFormMethod[] = [\n  \"post\",\n  \"put\",\n  \"patch\",\n  \"delete\",\n];\nconst validMutationMethods = new Set<MutationFormMethod>(\n  validMutationMethodsArr\n);\n\nconst validRequestMethodsArr: FormMethod[] = [\n  \"get\",\n  ...validMutationMethodsArr,\n];\nconst validRequestMethods = new Set<FormMethod>(validRequestMethodsArr);\n\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\n\nexport const IDLE_NAVIGATION: NavigationStates[\"Idle\"] = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nexport const IDLE_FETCHER: FetcherStates[\"Idle\"] = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nexport const IDLE_BLOCKER: BlockerUnblocked = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined,\n};\n\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n\nconst isBrowser =\n  typeof window !== \"undefined\" &&\n  typeof window.document !== \"undefined\" &&\n  typeof window.document.createElement !== \"undefined\";\nconst isServer = !isBrowser;\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\nexport function createRouter(init: RouterInit): Router {\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to createRouter\"\n  );\n\n  let dataRoutes = convertRoutesToDataRoutes(init.routes);\n  // Cleanup function for history\n  let unlistenHistory: (() => void) | null = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set<RouterSubscriber>();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions: Record<string, number> | null = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey: GetScrollRestorationKeyFunction | null = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition: GetScrollPositionFunction | null = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n\n  let initialMatches = matchRoutes(\n    dataRoutes,\n    init.history.location,\n    init.basename\n  );\n  let initialErrors: RouteData | null = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname,\n    });\n    let { matches, route } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = { [route.id]: error };\n  }\n\n  let initialized =\n    !initialMatches.some((m) => m.route.loader) || init.hydrationData != null;\n\n  let router: Router;\n  let state: RouterState = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: (init.hydrationData && init.hydrationData.loaderData) || {},\n    actionData: (init.hydrationData && init.hydrationData.actionData) || null,\n    errors: (init.hydrationData && init.hydrationData.errors) || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map(),\n  };\n\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction: HistoryAction = HistoryAction.Pop;\n\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n\n  // AbortController for the active navigation\n  let pendingNavigationController: AbortController | null;\n\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidate()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes: string[] = [];\n\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads: string[] = [];\n\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map<string, AbortController>();\n\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map<string, number>();\n\n  // Fetchers that triggered redirect navigations from their actions\n  let fetchRedirectIds = new Set<string>();\n\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map<string, FetchLoadMatch>();\n\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map<string, DeferredData>();\n\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  let blockerFunctions = new Map<string, BlockerFunction>();\n\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let ignoreNextHistoryUpdate = false;\n\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(\n      ({ action: historyAction, location, delta }) => {\n        // Ignore this event if it was just us resetting the URL from a\n        // blocked POP navigation\n        if (ignoreNextHistoryUpdate) {\n          ignoreNextHistoryUpdate = false;\n          return;\n        }\n\n        warning(\n          blockerFunctions.size === 0 || delta != null,\n          \"You are trying to use a blocker on a POP navigation to a location \" +\n            \"that was not created by @remix-run/router. This will fail silently in \" +\n            \"production. This can happen if you are navigating outside the router \" +\n            \"via `window.history.pushState`/`window.location.hash` instead of using \" +\n            \"router navigation APIs.  This can also happen if you are using \" +\n            \"createHashRouter and the user manually changes the URL.\"\n        );\n\n        let blockerKey = shouldBlockNavigation({\n          currentLocation: state.location,\n          nextLocation: location,\n          historyAction,\n        });\n\n        if (blockerKey && delta != null) {\n          // Restore the URL to match the current UI, but don't update router state\n          ignoreNextHistoryUpdate = true;\n          init.history.go(delta * -1);\n\n          // Put the blocker into a blocked state\n          updateBlocker(blockerKey, {\n            state: \"blocked\",\n            location,\n            proceed() {\n              updateBlocker(blockerKey!, {\n                state: \"proceeding\",\n                proceed: undefined,\n                reset: undefined,\n                location,\n              });\n              // Re-do the same POP navigation we just blocked\n              init.history.go(delta);\n            },\n            reset() {\n              deleteBlocker(blockerKey!);\n              updateState({ blockers: new Map(router.state.blockers) });\n            },\n          });\n          return;\n        }\n\n        return startNavigation(historyAction, location);\n      }\n    );\n\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    if (!state.initialized) {\n      startNavigation(HistoryAction.Pop, state.location);\n    }\n\n    return router;\n  }\n\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n\n  // Subscribe to state updates for the router\n  function subscribe(fn: RouterSubscriber) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n\n  // Update our state and notify the calling context of the change\n  function updateState(newState: Partial<RouterState>): void {\n    state = {\n      ...state,\n      ...newState,\n    };\n    subscribers.forEach((subscriber) => subscriber(state));\n  }\n\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(\n    location: Location,\n    newState: Partial<Omit<RouterState, \"action\" | \"location\" | \"navigation\">>\n  ): void {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload =\n      state.actionData != null &&\n      state.navigation.formMethod != null &&\n      isMutationMethod(state.navigation.formMethod) &&\n      state.navigation.state === \"loading\" &&\n      location.state?._isRedirect !== true;\n\n    let actionData: RouteData | null;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData\n      ? mergeLoaderData(\n          state.loaderData,\n          newState.loaderData,\n          newState.matches || [],\n          newState.errors\n        )\n      : state.loaderData;\n\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    for (let [key] of blockerFunctions) {\n      deleteBlocker(key);\n    }\n\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset =\n      pendingPreventScrollReset === true ||\n      (state.navigation.formMethod != null &&\n        isMutationMethod(state.navigation.formMethod) &&\n        location.state?._isRedirect !== true);\n\n    updateState({\n      ...newState, // matches, errors, fetchers go through as-is\n      actionData,\n      loaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      restoreScrollPosition: getSavedScrollPosition(\n        location,\n        newState.matches || state.matches\n      ),\n      preventScrollReset,\n      blockers: new Map(state.blockers),\n    });\n\n    if (isUninterruptedRevalidation) {\n      // If this was an uninterrupted revalidation then do not touch history\n    } else if (pendingAction === HistoryAction.Pop) {\n      // Do nothing for POP - URL has already been updated\n    } else if (pendingAction === HistoryAction.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === HistoryAction.Replace) {\n      init.history.replace(location, location.state);\n    }\n\n    // Reset stateful navigation vars\n    pendingAction = HistoryAction.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  }\n\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(\n    to: number | To,\n    opts?: RouterNavigateOptions\n  ): Promise<void> {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let { path, submission, error } = normalizeNavigateOptions(to, opts);\n\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    nextLocation = {\n      ...nextLocation,\n      ...init.history.encodeLocation(nextLocation),\n    };\n\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n\n    let historyAction = HistoryAction.Push;\n\n    if (userReplace === true) {\n      historyAction = HistoryAction.Replace;\n    } else if (userReplace === false) {\n      // no-op\n    } else if (\n      submission != null &&\n      isMutationMethod(submission.formMethod) &&\n      submission.formAction === state.location.pathname + state.location.search\n    ) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = HistoryAction.Replace;\n    }\n\n    let preventScrollReset =\n      opts && \"preventScrollReset\" in opts\n        ? opts.preventScrollReset === true\n        : undefined;\n\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction,\n    });\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey!, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation,\n          });\n          // Send the same navigation through\n          navigate(to, opts);\n        },\n        reset() {\n          deleteBlocker(blockerKey!);\n          updateState({ blockers: new Map(state.blockers) });\n        },\n      });\n      return;\n    }\n\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n    });\n  }\n\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({ revalidation: \"loading\" });\n\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true,\n      });\n      return;\n    }\n\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(\n      pendingAction || state.historyAction,\n      state.navigation.location,\n      { overrideNavigation: state.navigation }\n    );\n  }\n\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    opts?: {\n      submission?: Submission;\n      overrideNavigation?: Navigation;\n      pendingError?: ErrorResponse;\n      startUninterruptedRevalidation?: boolean;\n      preventScrollReset?: boolean;\n      replace?: boolean;\n    }\n  ): Promise<void> {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation =\n      (opts && opts.startUninterruptedRevalidation) === true;\n\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(dataRoutes, location, init.basename);\n\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      // Cancel all pending deferred on 404s since we don't keep any routes\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error,\n        },\n      });\n      return;\n    }\n\n    // Short circuit if it's only a hash change and not a mutation submission\n    // For example, on /page#hash and submit a <Form method=\"post\"> which will\n    // default to a navigation to /page\n    if (\n      isHashChangeOnly(state.location, location) &&\n      !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))\n    ) {\n      completeNavigation(location, { matches });\n      return;\n    }\n\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(\n      init.history,\n      location,\n      pendingNavigationController.signal,\n      opts && opts.submission\n    );\n    let pendingActionData: RouteData | undefined;\n    let pendingError: RouteData | undefined;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError,\n      };\n    } else if (\n      opts &&\n      opts.submission &&\n      isMutationMethod(opts.submission.formMethod)\n    ) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(\n        request,\n        location,\n        opts.submission,\n        matches,\n        { replace: opts.replace }\n      );\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        ...opts.submission,\n      };\n      loadingNavigation = navigation;\n\n      // Create a GET request for the loaders\n      request = new Request(request.url, { signal: request.signal });\n    }\n\n    // Call loaders\n    let { shortCircuited, loaderData, errors } = await handleLoaders(\n      request,\n      location,\n      matches,\n      loadingNavigation,\n      opts && opts.submission,\n      opts && opts.replace,\n      pendingActionData,\n      pendingError\n    );\n\n    if (shortCircuited) {\n      return;\n    }\n\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n\n    completeNavigation(location, {\n      matches,\n      ...(pendingActionData ? { actionData: pendingActionData } : {}),\n      loaderData,\n      errors,\n    });\n  }\n\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(\n    request: Request,\n    location: Location,\n    submission: Submission,\n    matches: AgnosticDataRouteMatch[],\n    opts?: { replace?: boolean }\n  ): Promise<HandleActionResult> {\n    interruptActiveLoads();\n\n    // Put us in a submitting state\n    let navigation: NavigationStates[\"Submitting\"] = {\n      state: \"submitting\",\n      location,\n      ...submission,\n    };\n    updateState({ navigation });\n\n    // Call our action and get the result\n    let result: DataResult;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id,\n        }),\n      };\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        router.basename\n      );\n\n      if (request.signal.aborted) {\n        return { shortCircuited: true };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let replace: boolean;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        replace =\n          result.location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(state, result, { submission, replace });\n      return { shortCircuited: true };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n\n      // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = HistoryAction.Push;\n      }\n\n      return {\n        // Send back an empty object we can use to clear out any prior actionData\n        pendingActionData: {},\n        pendingActionError: { [boundaryMatch.route.id]: result.error },\n      };\n    }\n\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    return {\n      pendingActionData: { [actionMatch.route.id]: result.data },\n    };\n  }\n\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    overrideNavigation?: Navigation,\n    submission?: Submission,\n    replace?: boolean,\n    pendingActionData?: RouteData,\n    pendingError?: RouteData\n  ): Promise<HandleLoadersResult> {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation;\n    if (!loadingNavigation) {\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        ...submission,\n      };\n      loadingNavigation = navigation;\n    }\n\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission = submission\n      ? submission\n      : loadingNavigation.formMethod &&\n        loadingNavigation.formAction &&\n        loadingNavigation.formData &&\n        loadingNavigation.formEncType\n      ? {\n          formMethod: loadingNavigation.formMethod,\n          formAction: loadingNavigation.formAction,\n          formData: loadingNavigation.formData,\n          formEncType: loadingNavigation.formEncType,\n        }\n      : undefined;\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      activeSubmission,\n      location,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      pendingActionData,\n      pendingError,\n      fetchLoadMatches\n    );\n\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(\n      (routeId) =>\n        !(matches && matches.some((m) => m.route.id === routeId)) ||\n        (matchesToLoad && matchesToLoad.some((m) => m.route.id === routeId))\n    );\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      completeNavigation(location, {\n        matches,\n        loaderData: {},\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null,\n        ...(pendingActionData ? { actionData: pendingActionData } : {}),\n      });\n      return { shortCircuited: true };\n    }\n\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach((rf) => {\n        let fetcher = state.fetchers.get(rf.key);\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: fetcher && fetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n          \" _hasFetcherDoneAnything \": true,\n        };\n        state.fetchers.set(rf.key, revalidatingFetcher);\n      });\n      let actionData = pendingActionData || state.actionData;\n      updateState({\n        navigation: loadingNavigation,\n        ...(actionData\n          ? Object.keys(actionData).length === 0\n            ? { actionData: null }\n            : { actionData }\n          : {}),\n        ...(revalidatingFetchers.length > 0\n          ? { fetchers: new Map(state.fetchers) }\n          : {}),\n      });\n    }\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n    revalidatingFetchers.forEach((rf) =>\n      fetchControllers.set(rf.key, pendingNavigationController!)\n    );\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        request\n      );\n\n    if (request.signal.aborted) {\n      return { shortCircuited: true };\n    }\n\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    revalidatingFetchers.forEach((rf) => fetchControllers.delete(rf.key));\n\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(results);\n    if (redirect) {\n      await startRedirectNavigation(state, redirect, { replace });\n      return { shortCircuited: true };\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      loaderResults,\n      pendingError,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe((aborted) => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n\n    markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n\n    return {\n      loaderData,\n      errors,\n      ...(didAbortFetchLoads || revalidatingFetchers.length > 0\n        ? { fetchers: new Map(state.fetchers) }\n        : {}),\n    };\n  }\n\n  function getFetcher<TData = any>(key: string): Fetcher<TData> {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(\n    key: string,\n    routeId: string,\n    href: string,\n    opts?: RouterFetchOptions\n  ) {\n    if (isServer) {\n      throw new Error(\n        \"router.fetch() was called during the server render, but it shouldn't be. \" +\n          \"You are likely calling a useFetcher() method in the body of your component. \" +\n          \"Try moving it to a useEffect or a callback.\"\n      );\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n\n    let matches = matchRoutes(dataRoutes, href, init.basename);\n    if (!matches) {\n      setFetcherError(\n        key,\n        routeId,\n        getInternalRouterError(404, { pathname: href })\n      );\n      return;\n    }\n\n    let { path, submission } = normalizeNavigateOptions(href, opts, true);\n    let match = getTargetMatch(matches, path);\n\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, submission);\n      return;\n    }\n\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, { routeId, path, match, matches });\n    handleFetcherLoader(key, routeId, path, match, matches, submission);\n  }\n\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    requestMatches: AgnosticDataRouteMatch[],\n    submission: Submission\n  ) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    if (!match.route.action) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId,\n      });\n      setFetcherError(key, routeId, error);\n      return;\n    }\n\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    let fetcher: FetcherStates[\"Submitting\"] = {\n      state: \"submitting\",\n      ...submission,\n      data: existingFetcher && existingFetcher.data,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, fetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the action for the fetcher\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal,\n      submission\n    );\n    fetchControllers.set(key, abortController);\n\n    let actionResult = await callLoaderOrAction(\n      \"action\",\n      fetchRequest,\n      match,\n      requestMatches,\n      router.basename\n    );\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by ou our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      fetchRedirectIds.add(key);\n      let loadingFetcher: FetcherStates[\"Loading\"] = {\n        state: \"loading\",\n        ...submission,\n        data: undefined,\n        \" _hasFetcherDoneAnything \": true,\n      };\n      state.fetchers.set(key, loadingFetcher);\n      updateState({ fetchers: new Map(state.fetchers) });\n\n      return startRedirectNavigation(state, actionResult, {\n        isFetchActionRedirect: true,\n      });\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(\n      init.history,\n\n      nextLocation,\n      abortController.signal\n    );\n    let matches =\n      state.navigation.state !== \"idle\"\n        ? matchRoutes(dataRoutes, state.navigation.location, init.basename)\n        : state.matches;\n\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      data: actionResult.data,\n      ...submission,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, loadFetcher);\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      submission,\n      nextLocation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      { [match.route.id]: actionResult.data },\n      undefined, // No need to send through errors since we short circuit above\n      fetchLoadMatches\n    );\n\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers\n      .filter((rf) => rf.key !== key)\n      .forEach((rf) => {\n        let staleKey = rf.key;\n        let existingFetcher = state.fetchers.get(staleKey);\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: existingFetcher && existingFetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n          \" _hasFetcherDoneAnything \": true,\n        };\n        state.fetchers.set(staleKey, revalidatingFetcher);\n        fetchControllers.set(staleKey, abortController);\n      });\n\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        revalidationRequest\n      );\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach((r) => fetchControllers.delete(r.key));\n\n    let redirect = findRedirect(results);\n    if (redirect) {\n      return startRedirectNavigation(state, redirect);\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      state.matches,\n      matchesToLoad,\n      loaderResults,\n      undefined,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: actionResult.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, doneFetcher);\n\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId);\n\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (\n      state.navigation.state === \"loading\" &&\n      loadId > pendingNavigationLoadId\n    ) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers),\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(\n          state.loaderData,\n          loaderData,\n          matches,\n          errors\n        ),\n        ...(didAbortFetchLoads ? { fetchers: new Map(state.fetchers) } : {}),\n      });\n      isRevalidationRequired = false;\n    }\n  }\n\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    matches: AgnosticDataRouteMatch[],\n    submission?: Submission\n  ) {\n    let existingFetcher = state.fetchers.get(key);\n    // Put this fetcher into it's loading state\n    let loadingFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      ...submission,\n      data: existingFetcher && existingFetcher.data,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, loadingFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the loader for this fetcher route match\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal\n    );\n    fetchControllers.set(key, abortController);\n    let result: DataResult = await callLoaderOrAction(\n      \"loader\",\n      fetchRequest,\n      match,\n      matches,\n      router.basename\n    );\n\n    // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result =\n        (await resolveDeferredData(result, fetchRequest.signal, true)) ||\n        result;\n    }\n\n    // We can delete this so long as we weren't aborted by ou our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      await startRedirectNavigation(state, result);\n      return;\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key);\n      // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error,\n        },\n      });\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n\n    // Put the fetcher back into an idle state\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: result.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, doneFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(\n    state: RouterState,\n    redirect: RedirectResult,\n    {\n      submission,\n      replace,\n      isFetchActionRedirect,\n    }: {\n      submission?: Submission;\n      replace?: boolean;\n      isFetchActionRedirect?: boolean;\n    } = {}\n  ) {\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n\n    let redirectLocation = createLocation(\n      state.location,\n      redirect.location,\n      // TODO: This can be removed once we get rid of useTransition in Remix v2\n      {\n        _isRedirect: true,\n        ...(isFetchActionRedirect ? { _isFetchActionRedirect: true } : {}),\n      }\n    );\n    invariant(\n      redirectLocation,\n      \"Expected a location on the redirect navigation\"\n    );\n\n    // Check if this an absolute external redirect that goes to a new origin\n    if (\n      ABSOLUTE_URL_REGEX.test(redirect.location) &&\n      isBrowser &&\n      typeof window?.location !== \"undefined\"\n    ) {\n      let newOrigin = init.history.createURL(redirect.location).origin;\n      if (window.location.origin !== newOrigin) {\n        if (replace) {\n          window.location.replace(redirect.location);\n        } else {\n          window.location.assign(redirect.location);\n        }\n        return;\n      }\n    }\n\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n\n    let redirectHistoryAction =\n      replace === true ? HistoryAction.Replace : HistoryAction.Push;\n\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let { formMethod, formAction, formEncType, formData } = state.navigation;\n    if (!submission && formMethod && formAction && formData && formEncType) {\n      submission = {\n        formMethod,\n        formAction,\n        formEncType,\n        formData,\n      };\n    }\n\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    if (\n      redirectPreserveMethodStatusCodes.has(redirect.status) &&\n      submission &&\n      isMutationMethod(submission.formMethod)\n    ) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: {\n          ...submission,\n          formAction: redirect.location,\n        },\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    } else {\n      // Otherwise, we kick off a new loading navigation, preserving the\n      // submission info for the duration of this navigation\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation: {\n          state: \"loading\",\n          location: redirectLocation,\n          formMethod: submission ? submission.formMethod : undefined,\n          formAction: submission ? submission.formAction : undefined,\n          formEncType: submission ? submission.formEncType : undefined,\n          formData: submission ? submission.formData : undefined,\n        },\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    }\n  }\n\n  async function callLoadersAndMaybeResolveData(\n    currentMatches: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    matchesToLoad: AgnosticDataRouteMatch[],\n    fetchersToLoad: RevalidatingFetcher[],\n    request: Request\n  ) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\"loader\", request, match, matches, router.basename)\n      ),\n      ...fetchersToLoad.map((f) =>\n        callLoaderOrAction(\n          \"loader\",\n          createClientSideRequest(init.history, f.path, request.signal),\n          f.match,\n          f.matches,\n          router.basename\n        )\n      ),\n    ]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n\n    await Promise.all([\n      resolveDeferredResults(\n        currentMatches,\n        matchesToLoad,\n        loaderResults,\n        request.signal,\n        false,\n        state.loaderData\n      ),\n      resolveDeferredResults(\n        currentMatches,\n        fetchersToLoad.map((f) => f.match),\n        fetcherResults,\n        request.signal,\n        true\n      ),\n    ]);\n\n    return { results, loaderResults, fetcherResults };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function setFetcherError(key: string, routeId: string, error: any) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error,\n      },\n      fetchers: new Map(state.fetchers),\n    });\n  }\n\n  function deleteFetcher(key: string): void {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key: string) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, `Expected fetch controller: ${key}`);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys: string[]) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: fetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone(): void {\n    let doneKeys = [];\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n      }\n    }\n    markFetchersDone(doneKeys);\n  }\n\n  function abortStaleFetchLoads(landedId: number): boolean {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function getBlocker(key: string, fn: BlockerFunction) {\n    let blocker: Blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n\n    return blocker;\n  }\n\n  function deleteBlocker(key: string) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key: string, newBlocker: Blocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(\n      (blocker.state === \"unblocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"proceeding\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"unblocked\") ||\n        (blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\"),\n      `Invalid blocker state transition: ${blocker.state} -> ${newBlocker.state}`\n    );\n\n    state.blockers.set(key, newBlocker);\n    updateState({ blockers: new Map(state.blockers) });\n  }\n\n  function shouldBlockNavigation({\n    currentLocation,\n    nextLocation,\n    historyAction,\n  }: {\n    currentLocation: Location;\n    nextLocation: Location;\n    historyAction: HistoryAction;\n  }): string | undefined {\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n\n    // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({ currentLocation, nextLocation, historyAction })) {\n      return blockerKey;\n    }\n  }\n\n  function cancelActiveDeferreds(\n    predicate?: (routeId: string) => boolean\n  ): string[] {\n    let cancelledRouteIds: string[] = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(\n    positions: Record<string, number>,\n    getPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || ((location) => location.key);\n\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({ restoreScrollPosition: y });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function saveScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): void {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map((m) =>\n        createUseMatchesMatch(m, state.loaderData)\n      );\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): number | null {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map((m) =>\n        createUseMatchesMatch(m, state.loaderData)\n      );\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n\n  router = {\n    get basename() {\n      return init.basename;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: (to: To) => init.history.createHref(to),\n    encodeLocation: (to: To) => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n  };\n\n  return router;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nexport const UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\n\nexport function createStaticHandler(\n  routes: AgnosticRouteObject[],\n  opts?: {\n    basename?: string;\n  }\n): StaticHandler {\n  invariant(\n    routes.length > 0,\n    \"You must provide a non-empty routes array to createStaticHandler\"\n  );\n\n  let dataRoutes = convertRoutesToDataRoutes(routes);\n  let basename = (opts ? opts.basename : null) || \"/\";\n\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n  async function query(\n    request: Request,\n    { requestContext }: { requestContext?: unknown } = {}\n  ): Promise<StaticHandlerContext | Response> {\n    let url = new URL(request.url);\n    let method = request.method.toLowerCase();\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"head\") {\n      let error = getInternalRouterError(405, { method });\n      let { matches: methodNotAllowedMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let result = await queryImpl(request, location, matches, requestContext);\n    if (isResponse(result)) {\n      return result;\n    }\n\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return { location, basename, ...result };\n  }\n\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n  async function queryRoute(\n    request: Request,\n    {\n      routeId,\n      requestContext,\n    }: { requestContext?: unknown; routeId?: string } = {}\n  ): Promise<any> {\n    let url = new URL(request.url);\n    let method = request.method.toLowerCase();\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"head\" && method !== \"options\") {\n      throw getInternalRouterError(405, { method });\n    } else if (!matches) {\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let match = routeId\n      ? matches.find((m) => m.route.id === routeId)\n      : getTargetMatch(matches, location);\n\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId,\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      match\n    );\n    if (isResponse(result)) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n\n    // Pick off the right state value to return\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n\n    if (result.loaderData) {\n      let data = Object.values(result.loaderData)[0];\n      if (result.activeDeferreds?.[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n\n    return undefined;\n  }\n\n  async function queryImpl(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    routeMatch?: AgnosticDataRouteMatch\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    invariant(\n      request.signal,\n      \"query()/queryRoute() requests must contain an AbortController signal\"\n    );\n\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(\n          request,\n          matches,\n          routeMatch || getTargetMatch(matches, location),\n          requestContext,\n          routeMatch != null\n        );\n        return result;\n      }\n\n      let result = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        routeMatch\n      );\n      return isResponse(result)\n        ? result\n        : {\n            ...result,\n            actionData: null,\n            actionHeaders: {},\n          };\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error && !isRedirectResponse(e.response)) {\n          throw e.response;\n        }\n        return e.response;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n\n  async function submit(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    actionMatch: AgnosticDataRouteMatch,\n    requestContext: unknown,\n    isRouteRequest: boolean\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    let result: DataResult;\n\n    if (!actionMatch.route.action) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id,\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        basename,\n        true,\n        isRouteRequest,\n        requestContext\n      );\n\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(`${method}() call aborted`);\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location,\n        },\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, { type: \"defer-action\" });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: { [actionMatch.route.id]: result.data },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        undefined,\n        {\n          [boundaryMatch.route.id]: result.error,\n        }\n      );\n\n      // action status codes take precedence over loader status codes\n      return {\n        ...context,\n        statusCode: isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500,\n        actionData: null,\n        actionHeaders: {\n          ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n        },\n      };\n    }\n\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal,\n    });\n    let context = await loadRouteData(loaderRequest, matches, requestContext);\n\n    return {\n      ...context,\n      // action status codes take precedence over loader status codes\n      ...(result.statusCode ? { statusCode: result.statusCode } : {}),\n      actionData: {\n        [actionMatch.route.id]: result.data,\n      },\n      actionHeaders: {\n        ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n      },\n    };\n  }\n\n  async function loadRouteData(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    routeMatch?: AgnosticDataRouteMatch,\n    pendingActionError?: RouteData\n  ): Promise<\n    | Omit<\n        StaticHandlerContext,\n        \"location\" | \"basename\" | \"actionData\" | \"actionHeaders\"\n      >\n    | Response\n  > {\n    let isRouteRequest = routeMatch != null;\n\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (isRouteRequest && !routeMatch?.route.loader) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch?.route.id,\n      });\n    }\n\n    let requestMatches = routeMatch\n      ? [routeMatch]\n      : getLoaderMatchesUntilBoundary(\n          matches,\n          Object.keys(pendingActionError || {})[0]\n        );\n    let matchesToLoad = requestMatches.filter((m) => m.route.loader);\n\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce(\n          (acc, m) => Object.assign(acc, { [m.route.id]: null }),\n          {}\n        ),\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\n          \"loader\",\n          request,\n          match,\n          matches,\n          basename,\n          true,\n          isRouteRequest,\n          requestContext\n        )\n      ),\n    ]);\n\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(`${method}() call aborted`);\n    }\n\n    // Process and commit output from loaders\n    let activeDeferreds = new Map<string, DeferredData>();\n    let context = processRouteLoaderData(\n      matches,\n      matchesToLoad,\n      results,\n      pendingActionError,\n      activeDeferreds\n    );\n\n    // Add a null for any non-loader matches for proper revalidation on the client\n    let executedLoaders = new Set<string>(\n      matchesToLoad.map((match) => match.route.id)\n    );\n    matches.forEach((match) => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n\n    return {\n      ...context,\n      matches,\n      activeDeferreds:\n        activeDeferreds.size > 0\n          ? Object.fromEntries(activeDeferreds.entries())\n          : null,\n    };\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute,\n  };\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nexport function getStaticContextFromError(\n  routes: AgnosticDataRouteObject[],\n  context: StaticHandlerContext,\n  error: any\n) {\n  let newContext: StaticHandlerContext = {\n    ...context,\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error,\n    },\n  };\n  return newContext;\n}\n\nfunction isSubmissionNavigation(\n  opts: RouterNavigateOptions\n): opts is SubmissionNavigateOptions {\n  return opts != null && \"formData\" in opts;\n}\n\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(\n  to: To,\n  opts?: RouterNavigateOptions,\n  isFetcher = false\n): {\n  path: string;\n  submission?: Submission;\n  error?: ErrorResponse;\n} {\n  let path = typeof to === \"string\" ? to : createPath(to);\n\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return { path };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, { method: opts.formMethod }),\n    };\n  }\n\n  // Create a Submission on non-GET navigations\n  let submission: Submission | undefined;\n  if (opts.formData) {\n    submission = {\n      formMethod: opts.formMethod || \"get\",\n      formAction: stripHashFromPath(path),\n      formEncType:\n        (opts && opts.formEncType) || \"application/x-www-form-urlencoded\",\n      formData: opts.formData,\n    };\n\n    if (isMutationMethod(submission.formMethod)) {\n      return { path, submission };\n    }\n  }\n\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  let searchParams = convertFormDataToSearchParams(opts.formData);\n  // Since fetcher GET submissions only run a single loader (as opposed to\n  // navigation GET submissions which run all loaders), we need to preserve\n  // any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = `?${searchParams}`;\n\n  return { path: createPath(parsedPath), submission };\n}\n\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(\n  matches: AgnosticDataRouteMatch[],\n  boundaryId?: string\n) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex((m) => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(\n  history: History,\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  submission: Submission | undefined,\n  location: Location,\n  isRevalidationRequired: boolean,\n  cancelledDeferredRoutes: string[],\n  cancelledFetcherLoads: string[],\n  pendingActionData?: RouteData,\n  pendingError?: RouteData,\n  fetchLoadMatches?: Map<string, FetchLoadMatch>\n): [AgnosticDataRouteMatch[], RevalidatingFetcher[]] {\n  let actionResult = pendingError\n    ? Object.values(pendingError)[0]\n    : pendingActionData\n    ? Object.values(pendingActionData)[0]\n    : undefined;\n\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n\n  let defaultShouldRevalidate =\n    // Forced revalidation due to submission, useRevalidate, or X-Remix-Revalidate\n    isRevalidationRequired ||\n    // Clicked the same link, resubmitted a GET form\n    currentUrl.toString() === nextUrl.toString() ||\n    // Search params affect all loaders\n    currentUrl.search !== nextUrl.search;\n\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    if (match.route.loader == null) {\n      return false;\n    }\n\n    // Always call the loader on new route instances and pending defer cancellations\n    if (\n      isNewLoader(state.loaderData, state.matches[index], match) ||\n      cancelledDeferredRoutes.some((id) => id === match.route.id)\n    ) {\n      return true;\n    }\n\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n\n    return shouldRevalidateLoader(match, {\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params,\n      ...submission,\n      actionResult,\n      defaultShouldRevalidate:\n        defaultShouldRevalidate ||\n        isNewRouteInstance(currentRouteMatch, nextRouteMatch),\n    });\n  });\n\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers: RevalidatingFetcher[] = [];\n  fetchLoadMatches &&\n    fetchLoadMatches.forEach((f, key) => {\n      if (!matches.some((m) => m.route.id === f.routeId)) {\n        // This fetcher is not going to be present in the subsequent render so\n        // there's no need to revalidate it\n        return;\n      } else if (cancelledFetcherLoads.includes(key)) {\n        // This fetcher was cancelled from a prior action submission - force reload\n        revalidatingFetchers.push({ key, ...f });\n      } else {\n        // Revalidating fetchers are decoupled from the route matches since they\n        // hit a static href, so they _always_ check shouldRevalidate and the\n        // default is strictly if a revalidation is explicitly required (action\n        // submissions, useRevalidator, X-Remix-Revalidate).\n        let shouldRevalidate = shouldRevalidateLoader(f.match, {\n          currentUrl,\n          currentParams: state.matches[state.matches.length - 1].params,\n          nextUrl,\n          nextParams: matches[matches.length - 1].params,\n          ...submission,\n          actionResult,\n          defaultShouldRevalidate,\n        });\n        if (shouldRevalidate) {\n          revalidatingFetchers.push({ key, ...f });\n        }\n      }\n    });\n\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(\n  currentLoaderData: RouteData,\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let isNew =\n    // [a] -> [a, b]\n    !currentMatch ||\n    // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id;\n\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    (currentPath != null &&\n      currentPath.endsWith(\"*\") &&\n      currentMatch.params[\"*\"] !== match.params[\"*\"])\n  );\n}\n\nfunction shouldRevalidateLoader(\n  loaderMatch: AgnosticDataRouteMatch,\n  arg: Parameters<ShouldRevalidateFunction>[0]\n) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return arg.defaultShouldRevalidate;\n}\n\nasync function callLoaderOrAction(\n  type: \"loader\" | \"action\",\n  request: Request,\n  match: AgnosticDataRouteMatch,\n  matches: AgnosticDataRouteMatch[],\n  basename = \"/\",\n  isStaticRequest: boolean = false,\n  isRouteRequest: boolean = false,\n  requestContext?: unknown\n): Promise<DataResult> {\n  let resultType;\n  let result;\n\n  // Setup a promise we can race against so that abort signals short circuit\n  let reject: () => void;\n  let abortPromise = new Promise((_, r) => (reject = r));\n  let onReject = () => reject();\n  request.signal.addEventListener(\"abort\", onReject);\n\n  try {\n    let handler = match.route[type];\n    invariant<Function>(\n      handler,\n      `Could not find the ${type} to run on the \"${match.route.id}\" route`\n    );\n\n    result = await Promise.race([\n      handler({ request, params: match.params, context: requestContext }),\n      abortPromise,\n    ]);\n\n    invariant(\n      result !== undefined,\n      `You defined ${type === \"action\" ? \"an action\" : \"a loader\"} for route ` +\n        `\"${match.route.id}\" but didn't return anything from your \\`${type}\\` ` +\n        `function. Please return a value or \\`null\\`.`\n    );\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    request.signal.removeEventListener(\"abort\", onReject);\n  }\n\n  if (isResponse(result)) {\n    let status = result.status;\n\n    // Process redirects\n    if (redirectStatusCodes.has(status)) {\n      let location = result.headers.get(\"Location\");\n      invariant(\n        location,\n        \"Redirects returned/thrown from loaders/actions must have a Location header\"\n      );\n\n      // Support relative routing in internal redirects\n      if (!ABSOLUTE_URL_REGEX.test(location)) {\n        let activeMatches = matches.slice(0, matches.indexOf(match) + 1);\n        let routePathnames = getPathContributingMatches(activeMatches).map(\n          (match) => match.pathnameBase\n        );\n        let resolvedLocation = resolveTo(\n          location,\n          routePathnames,\n          new URL(request.url).pathname\n        );\n        invariant(\n          createPath(resolvedLocation),\n          `Unable to resolve redirect location: ${location}`\n        );\n\n        // Prepend the basename to the redirect location if we have one\n        if (basename) {\n          let path = resolvedLocation.pathname;\n          resolvedLocation.pathname =\n            path === \"/\" ? basename : joinPaths([basename, path]);\n        }\n\n        location = createPath(resolvedLocation);\n      } else if (!isStaticRequest) {\n        // Strip off the protocol+origin for same-origin absolute redirects.\n        // If this is a static reques, we can let it go back to the browser\n        // as-is\n        let currentUrl = new URL(request.url);\n        let url = location.startsWith(\"//\")\n          ? new URL(currentUrl.protocol + location)\n          : new URL(location);\n        if (url.origin === currentUrl.origin) {\n          location = url.pathname + url.search + url.hash;\n        }\n      }\n\n      // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n      if (isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null,\n      };\n    }\n\n    // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n    if (isRouteRequest) {\n      // eslint-disable-next-line no-throw-literal\n      throw {\n        type: resultType || ResultType.data,\n        response: result,\n      };\n    }\n\n    let data: any;\n    let contentType = result.headers.get(\"Content-Type\");\n    // Check between word boundaries instead of startsWith() due to the last\n    // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n    if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponse(status, result.statusText, data),\n        headers: result.headers,\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers,\n    };\n  }\n\n  if (resultType === ResultType.error) {\n    return { type: resultType, error: result };\n  }\n\n  if (result instanceof DeferredData) {\n    return { type: ResultType.deferred, deferredData: result };\n  }\n\n  return { type: ResultType.data, data: result };\n}\n\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(\n  history: History,\n  location: string | Location,\n  signal: AbortSignal,\n  submission?: Submission\n): Request {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init: RequestInit = { signal };\n\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let { formMethod, formEncType, formData } = submission;\n    init.method = formMethod.toUpperCase();\n    init.body =\n      formEncType === \"application/x-www-form-urlencoded\"\n        ? convertFormDataToSearchParams(formData)\n        : formData;\n  }\n\n  // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData: FormData): URLSearchParams {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, value instanceof File ? value.name : value);\n  }\n\n  return searchParams;\n}\n\nfunction processRouteLoaderData(\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors: RouterState[\"errors\"] | null;\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n} {\n  // Fill in loaderData/errors from our loaders\n  let loaderData: RouterState[\"loaderData\"] = {};\n  let errors: RouterState[\"errors\"] | null = null;\n  let statusCode: number | undefined;\n  let foundError = false;\n  let loaderHeaders: Record<string, Headers> = {};\n\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n\n      errors = errors || {};\n\n      // Prefer higher error values if lower errors bubble to the same boundary\n      if (errors[boundaryMatch.route.id] == null) {\n        errors[boundaryMatch.route.id] = error;\n      }\n\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n      } else {\n        loaderData[id] = result.data;\n      }\n\n      // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n      if (\n        result.statusCode != null &&\n        result.statusCode !== 200 &&\n        !foundError\n      ) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  });\n\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError) {\n    errors = pendingError;\n    loaderData[Object.keys(pendingError)[0]] = undefined;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders,\n  };\n}\n\nfunction processLoaderData(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  revalidatingFetchers: RevalidatingFetcher[],\n  fetcherResults: DataResult[],\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors?: RouterState[\"errors\"];\n} {\n  let { loaderData, errors } = processRouteLoaderData(\n    matches,\n    matchesToLoad,\n    results,\n    pendingError,\n    activeDeferreds\n  );\n\n  // Process results from our revalidating fetchers\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let { key, match } = revalidatingFetchers[index];\n    invariant(\n      fetcherResults !== undefined && fetcherResults[index] !== undefined,\n      \"Did not find corresponding fetcher result\"\n    );\n    let result = fetcherResults[index];\n\n    // Process fetcher non-redirect errors\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error,\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return { loaderData, errors };\n}\n\nfunction mergeLoaderData(\n  loaderData: RouteData,\n  newLoaderData: RouteData,\n  matches: AgnosticDataRouteMatch[],\n  errors: RouteData | null | undefined\n): RouteData {\n  let mergedLoaderData = { ...newLoaderData };\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      } else {\n        // No-op - this is so we ignore existing data if we have a key in the\n        // incoming object with an undefined value, which is how we unset a prior\n        // loaderData if we encounter a loader error\n      }\n    } else if (loaderData[id] !== undefined) {\n      mergedLoaderData[id] = loaderData[id];\n    }\n\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\n\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(\n  matches: AgnosticDataRouteMatch[],\n  routeId?: string\n): AgnosticDataRouteMatch {\n  let eligibleMatches = routeId\n    ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1)\n    : [...matches];\n  return (\n    eligibleMatches.reverse().find((m) => m.route.hasErrorBoundary === true) ||\n    matches[0]\n  );\n}\n\nfunction getShortCircuitMatches(routes: AgnosticDataRouteObject[]): {\n  matches: AgnosticDataRouteMatch[];\n  route: AgnosticDataRouteObject;\n} {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find((r) => r.index || !r.path || r.path === \"/\") || {\n    id: `__shim-error-route__`,\n  };\n\n  return {\n    matches: [\n      {\n        params: {},\n        pathname: \"\",\n        pathnameBase: \"\",\n        route,\n      },\n    ],\n    route,\n  };\n}\n\nfunction getInternalRouterError(\n  status: number,\n  {\n    pathname,\n    routeId,\n    method,\n    type,\n  }: {\n    pathname?: string;\n    routeId?: string;\n    method?: string;\n    type?: \"defer-action\";\n  } = {}\n) {\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method} request to \"${pathname}\" but ` +\n        `did not provide a \\`loader\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = `Route \"${routeId}\" does not match URL \"${pathname}\"`;\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = `No route matches URL \"${pathname}\"`;\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method.toUpperCase()} request to \"${pathname}\" but ` +\n        `did not provide an \\`action\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (method) {\n      errorMessage = `Invalid request method \"${method.toUpperCase()}\"`;\n    }\n  }\n\n  return new ErrorResponse(\n    status || 500,\n    statusText,\n    new Error(errorMessage),\n    true\n  );\n}\n\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results: DataResult[]): RedirectResult | undefined {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\n\nfunction stripHashFromPath(path: To) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath({ ...parsedPath, hash: \"\" });\n}\n\nfunction isHashChangeOnly(a: Location, b: Location): boolean {\n  return (\n    a.pathname === b.pathname && a.search === b.search && a.hash !== b.hash\n  );\n}\n\nfunction isDeferredResult(result: DataResult): result is DeferredResult {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result: DataResult): result is ErrorResult {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result?: DataResult): result is RedirectResult {\n  return (result && result.type) === ResultType.redirect;\n}\n\nfunction isResponse(value: any): value is Response {\n  return (\n    value != null &&\n    typeof value.status === \"number\" &&\n    typeof value.statusText === \"string\" &&\n    typeof value.headers === \"object\" &&\n    typeof value.body !== \"undefined\"\n  );\n}\n\nfunction isRedirectResponse(result: any): result is Response {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isQueryRouteResponse(obj: any): obj is QueryRouteResponse {\n  return (\n    obj &&\n    isResponse(obj.response) &&\n    (obj.type === ResultType.data || ResultType.error)\n  );\n}\n\nfunction isValidMethod(method: string): method is FormMethod {\n  return validRequestMethods.has(method as FormMethod);\n}\n\nfunction isMutationMethod(method?: string): method is MutationFormMethod {\n  return validMutationMethods.has(method as MutationFormMethod);\n}\n\nasync function resolveDeferredResults(\n  currentMatches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  signal: AbortSignal,\n  isFetcher: boolean,\n  currentLoaderData?: RouteData\n) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    let currentMatch = currentMatches.find(\n      (m) => m.route.id === match.route.id\n    );\n    let isRevalidatingLoader =\n      currentMatch != null &&\n      !isNewRouteInstance(currentMatch, match) &&\n      (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, isFetcher).then((result) => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(\n  result: DeferredResult,\n  signal: AbortSignal,\n  unwrap = false\n): Promise<SuccessResult | ErrorResult | undefined> {\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData,\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e,\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data,\n  };\n}\n\nfunction hasNakedIndexQuery(search: string): boolean {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\n\n// Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\nfunction createUseMatchesMatch(\n  match: AgnosticDataRouteMatch,\n  loaderData: RouteData\n): UseMatchesMatch {\n  let { route, pathname, params } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id] as unknown,\n    handle: route.handle as unknown,\n  };\n}\n\nfunction getTargetMatch(\n  matches: AgnosticDataRouteMatch[],\n  location: Location | string\n) {\n  let search =\n    typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (\n    matches[matches.length - 1].route.index &&\n    hasNakedIndexQuery(search || \"\")\n  ) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\n//#endregion\n"]},"metadata":{},"sourceType":"module"}